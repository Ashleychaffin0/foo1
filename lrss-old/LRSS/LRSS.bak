using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

#if false
Wish List:

#1 WISH: THE GUI SHOULD/MUST BE AS RESPONSIVE AS POSSIBLE!!!
#2 Wish: There's a world of difference between when the entry was published (which
		 might contain a date many time zones away), and when we downloaded it. This
		 latter is *much* more relevant to viewing. So, sure, we can display the
		 publication date, but most/all of our usage will be based on the download
		 date.

TREE-RELATED:
* Import / Export OPML
* Allow sub-trees
* Adding feeds (to the appropriate part of the tree)
* Allow the same feed to be in different sub-trees (e.g. BradA, CLR, Favorites).
  Presumably this can be done if the same RSSFeed reference is used as the tag in both
  cases.

FEED-RELATED:
* Multiple threads to actually do the web-based part.
* Threads must have editable properties, such as how often to check the blog for
  updates, how long to keep the data, etc.
* SharpReader seems to check publication dates and shows the title in italics if the 
  blog entry has been updated since we first saw it. So we must hold both the original
  date, and the last updated date. Only if we view the entry should we update the 
  original date with Now().
* Copy the feeds to a database.

GUI-RELATED:
* It's annoying in SharpReader when the GUI freezes while it does something (dunno 
  exactly what, but maybe updating the tree?). We probably want to monitor the mouse
  and keyboard, and only update the expensive (whatever they turn out to be) aspects
  of the GUI when the user has been idle for, say, 3 seconds (configurable, of course).
* Have an option to show only the feeds that were new (i.e. downloaded) in the past day,
  week, etc. Weekends are special.
* Use DataGridVew instead of ListView. Also use Data Binding

MULTI-USER:
* Need some kind of synchronization facility (email-based???) to let me read blogs at
  home and work.
#endif

namespace LRSS {
	public partial class LRSS : Form {

		const string	ParmsFileName = "LRSSParms.xml";
		LRSSParms		Parms;
		LRSSTreeNodes	TreeNodes;

//---------------------------------------------------------------------------------------

		public LRSS() {
			InitializeComponent();

			Parms = GenericSerialization<LRSSParms>.Load(ParmsFileName);
			// I'd like to do the following. But no. Still, you'd think it could/should work.
			// Parms = GenericSerialization<typeof(Parms)>.Load(ParmsFileName);
			if (Parms == null)
				Parms = new LRSSParms();
			LoadTree(Parms.TreeFileName);
		}

//---------------------------------------------------------------------------------------

		private void LoadTree(string FileName) {
			TreeNodes = GenericSerialization<LRSSTreeNodes>.Load(FileName);
			TreeNode	tNode;
			TreeNode	RootNode = new TreeNode("Subscribed Feeds");
			tvRSS.Nodes.Add(RootNode);
			foreach (LRSRSSTreeNode node in TreeNodes.nodes) {
				node.feed = new RSSFeed(node.feed.URL);		// TODO: ???
				tNode = new TreeNode(node.feed.Title);
				tNode.Tag = node;
				RootNode.Nodes.Add(tNode);
				// TODO: Add children
			}
		}

//---------------------------------------------------------------------------------------

		private void LRSS_FormClosing(object sender, FormClosingEventArgs e) {
			GenericSerialization<LRSSParms>.Save(ParmsFileName, Parms);
			GenericSerialization<LRSSTreeNodes>.Save(Parms.TreeFileName, TreeNodes);
		}

//---------------------------------------------------------------------------------------

		private void tvRSS_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e) {
			TreeNode	node = e.Node;
			if (node.Tag == null)
				return;				// If no tag, then not a feed, just a parent node
			LRSRSSTreeNode	tn = (LRSRSSTreeNode)node.Tag;
			lvItems.Items.Clear();
			// lvItems.Items.Add(new ListViewItem(tn.feed.Description));
			ListViewItem	lvItem;
			foreach (RSSItem item in tn.feed.Items) {
				lvItem = new ListViewItem(new string[] { item.Title, item.Description, item.pubDate.ToString("MM/dd/yy HH:mm") } );
				lvItem.Tag = item;
				lvItems.Items.Add(lvItem);
				
				// lvItems.Items.Add(item.Description);
			}
		}

//---------------------------------------------------------------------------------------

		private void lvItems_Click(object sender, EventArgs e) {
			ListViewItem	item = lvItems.SelectedItems[0];
			RSSItem			rssItem = (RSSItem)item.Tag;
			web.Navigate(rssItem.Link);
		}
	}



//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

	[Serializable]
	public class LRSSParms {
		public string				TreeFileName;

		public LRSSParms() {
			TreeFileName = "LRSTree.xml";
		}
	}
}