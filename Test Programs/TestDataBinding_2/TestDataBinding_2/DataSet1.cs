//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TestDataBinding_2 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private AlbumsDataTable tableAlbums;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Albums"] != null)) {
                    this.Tables.Add(new AlbumsDataTable(ds.Tables["Albums"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AlbumsDataTable Albums {
            get {
                return this.tableAlbums;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Albums"] != null)) {
                this.Tables.Add(new AlbumsDataTable(ds.Tables["Albums"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAlbums = ((AlbumsDataTable)(this.Tables["Albums"]));
            if ((this.tableAlbums != null)) {
                this.tableAlbums.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAlbums = new AlbumsDataTable();
            this.Tables.Add(this.tableAlbums);
        }
        
        private bool ShouldSerializeAlbums() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AlbumsRowChangeEventHandler(object sender, AlbumsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlbumsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAlbum_ID;
            
            private DataColumn columnArtist;
            
            private DataColumn columnCategory;
            
            private DataColumn columnComments;
            
            private DataColumn columnCuts;
            
            private DataColumn columnDiscID;
            
            private DataColumn columnExtra;
            
            private DataColumn columnLabel;
            
            private DataColumn columnLargeCoverURL;
            
            private DataColumn columnMoreInfoURL;
            
            private DataColumn columnNeed_Cut_Names_Expanded;
            
            private DataColumn columnNot_Found_on_web;
            
            private DataColumn columnOwner;
            
            private DataColumn columnPlayLengthInSeconds;
            
            private DataColumn columnRelease_Date;
            
            private DataColumn columnSite;
            
            private DataColumn columnSmallCoverURL;
            
            private DataColumn columnStyle;
            
            private DataColumn columnTitle;
            
            private DataColumn columnTotalLengthInFrames;
            
            private DataColumn columnTotalLengthInSeconds;
            
            private DataColumn columnTotalTime;
            
            private DataColumn columnVetted;
            
            private DataColumn columnXML;
            
            private DataColumn columnXML2;
            
            internal AlbumsDataTable() : 
                    base("Albums") {
                this.InitClass();
            }
            
            internal AlbumsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Album_IDColumn {
                get {
                    return this.columnAlbum_ID;
                }
            }
            
            internal DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            internal DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            internal DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            internal DataColumn CutsColumn {
                get {
                    return this.columnCuts;
                }
            }
            
            internal DataColumn DiscIDColumn {
                get {
                    return this.columnDiscID;
                }
            }
            
            internal DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            internal DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            internal DataColumn LargeCoverURLColumn {
                get {
                    return this.columnLargeCoverURL;
                }
            }
            
            internal DataColumn MoreInfoURLColumn {
                get {
                    return this.columnMoreInfoURL;
                }
            }
            
            internal DataColumn Need_Cut_Names_ExpandedColumn {
                get {
                    return this.columnNeed_Cut_Names_Expanded;
                }
            }
            
            internal DataColumn Not_Found_on_webColumn {
                get {
                    return this.columnNot_Found_on_web;
                }
            }
            
            internal DataColumn OwnerColumn {
                get {
                    return this.columnOwner;
                }
            }
            
            internal DataColumn PlayLengthInSecondsColumn {
                get {
                    return this.columnPlayLengthInSeconds;
                }
            }
            
            internal DataColumn Release_DateColumn {
                get {
                    return this.columnRelease_Date;
                }
            }
            
            internal DataColumn SiteColumn {
                get {
                    return this.columnSite;
                }
            }
            
            internal DataColumn SmallCoverURLColumn {
                get {
                    return this.columnSmallCoverURL;
                }
            }
            
            internal DataColumn StyleColumn {
                get {
                    return this.columnStyle;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn TotalLengthInFramesColumn {
                get {
                    return this.columnTotalLengthInFrames;
                }
            }
            
            internal DataColumn TotalLengthInSecondsColumn {
                get {
                    return this.columnTotalLengthInSeconds;
                }
            }
            
            internal DataColumn TotalTimeColumn {
                get {
                    return this.columnTotalTime;
                }
            }
            
            internal DataColumn VettedColumn {
                get {
                    return this.columnVetted;
                }
            }
            
            internal DataColumn XMLColumn {
                get {
                    return this.columnXML;
                }
            }
            
            internal DataColumn XML2Column {
                get {
                    return this.columnXML2;
                }
            }
            
            public AlbumsRow this[int index] {
                get {
                    return ((AlbumsRow)(this.Rows[index]));
                }
            }
            
            public event AlbumsRowChangeEventHandler AlbumsRowChanged;
            
            public event AlbumsRowChangeEventHandler AlbumsRowChanging;
            
            public event AlbumsRowChangeEventHandler AlbumsRowDeleted;
            
            public event AlbumsRowChangeEventHandler AlbumsRowDeleting;
            
            public void AddAlbumsRow(AlbumsRow row) {
                this.Rows.Add(row);
            }
            
            public AlbumsRow AddAlbumsRow(
                        int Album_ID, 
                        string Artist, 
                        string Category, 
                        string Comments, 
                        int Cuts, 
                        int DiscID, 
                        string Extra, 
                        string Label, 
                        string LargeCoverURL, 
                        string MoreInfoURL, 
                        bool Need_Cut_Names_Expanded, 
                        bool Not_Found_on_web, 
                        string Owner, 
                        int PlayLengthInSeconds, 
                        string Release_Date, 
                        string Site, 
                        string SmallCoverURL, 
                        string Style, 
                        string Title, 
                        int TotalLengthInFrames, 
                        int TotalLengthInSeconds, 
                        System.DateTime TotalTime, 
                        bool Vetted, 
                        string XML, 
                        string XML2) {
                AlbumsRow rowAlbumsRow = ((AlbumsRow)(this.NewRow()));
                rowAlbumsRow.ItemArray = new object[] {
                        Album_ID,
                        Artist,
                        Category,
                        Comments,
                        Cuts,
                        DiscID,
                        Extra,
                        Label,
                        LargeCoverURL,
                        MoreInfoURL,
                        Need_Cut_Names_Expanded,
                        Not_Found_on_web,
                        Owner,
                        PlayLengthInSeconds,
                        Release_Date,
                        Site,
                        SmallCoverURL,
                        Style,
                        Title,
                        TotalLengthInFrames,
                        TotalLengthInSeconds,
                        TotalTime,
                        Vetted,
                        XML,
                        XML2};
                this.Rows.Add(rowAlbumsRow);
                return rowAlbumsRow;
            }
            
            public AlbumsRow FindByArtistDiscIDTitle(string Artist, int DiscID, string Title) {
                return ((AlbumsRow)(this.Rows.Find(new object[] {
                            Artist,
                            DiscID,
                            Title})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AlbumsDataTable cln = ((AlbumsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AlbumsDataTable();
            }
            
            internal void InitVars() {
                this.columnAlbum_ID = this.Columns["Album ID"];
                this.columnArtist = this.Columns["Artist"];
                this.columnCategory = this.Columns["Category"];
                this.columnComments = this.Columns["Comments"];
                this.columnCuts = this.Columns["Cuts"];
                this.columnDiscID = this.Columns["DiscID"];
                this.columnExtra = this.Columns["Extra"];
                this.columnLabel = this.Columns["Label"];
                this.columnLargeCoverURL = this.Columns["LargeCoverURL"];
                this.columnMoreInfoURL = this.Columns["MoreInfoURL"];
                this.columnNeed_Cut_Names_Expanded = this.Columns["Need Cut Names Expanded"];
                this.columnNot_Found_on_web = this.Columns["Not Found on web"];
                this.columnOwner = this.Columns["Owner"];
                this.columnPlayLengthInSeconds = this.Columns["PlayLengthInSeconds"];
                this.columnRelease_Date = this.Columns["Release Date"];
                this.columnSite = this.Columns["Site"];
                this.columnSmallCoverURL = this.Columns["SmallCoverURL"];
                this.columnStyle = this.Columns["Style"];
                this.columnTitle = this.Columns["Title"];
                this.columnTotalLengthInFrames = this.Columns["TotalLengthInFrames"];
                this.columnTotalLengthInSeconds = this.Columns["TotalLengthInSeconds"];
                this.columnTotalTime = this.Columns["TotalTime"];
                this.columnVetted = this.Columns["Vetted"];
                this.columnXML = this.Columns["XML"];
                this.columnXML2 = this.Columns["XML2"];
            }
            
            private void InitClass() {
                this.columnAlbum_ID = new DataColumn("Album ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlbum_ID);
                this.columnArtist = new DataColumn("Artist", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArtist);
                this.columnCategory = new DataColumn("Category", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCategory);
                this.columnComments = new DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComments);
                this.columnCuts = new DataColumn("Cuts", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCuts);
                this.columnDiscID = new DataColumn("DiscID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDiscID);
                this.columnExtra = new DataColumn("Extra", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtra);
                this.columnLabel = new DataColumn("Label", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabel);
                this.columnLargeCoverURL = new DataColumn("LargeCoverURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLargeCoverURL);
                this.columnMoreInfoURL = new DataColumn("MoreInfoURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMoreInfoURL);
                this.columnNeed_Cut_Names_Expanded = new DataColumn("Need Cut Names Expanded", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNeed_Cut_Names_Expanded);
                this.columnNot_Found_on_web = new DataColumn("Not Found on web", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNot_Found_on_web);
                this.columnOwner = new DataColumn("Owner", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOwner);
                this.columnPlayLengthInSeconds = new DataColumn("PlayLengthInSeconds", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlayLengthInSeconds);
                this.columnRelease_Date = new DataColumn("Release Date", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRelease_Date);
                this.columnSite = new DataColumn("Site", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSite);
                this.columnSmallCoverURL = new DataColumn("SmallCoverURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSmallCoverURL);
                this.columnStyle = new DataColumn("Style", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStyle);
                this.columnTitle = new DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnTotalLengthInFrames = new DataColumn("TotalLengthInFrames", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalLengthInFrames);
                this.columnTotalLengthInSeconds = new DataColumn("TotalLengthInSeconds", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalLengthInSeconds);
                this.columnTotalTime = new DataColumn("TotalTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalTime);
                this.columnVetted = new DataColumn("Vetted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVetted);
                this.columnXML = new DataColumn("XML", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnXML);
                this.columnXML2 = new DataColumn("XML2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnXML2);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnArtist,
                                this.columnDiscID,
                                this.columnTitle}, true));
                this.columnArtist.AllowDBNull = false;
                this.columnDiscID.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
            }
            
            public AlbumsRow NewAlbumsRow() {
                return ((AlbumsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AlbumsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AlbumsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AlbumsRowChanged != null)) {
                    this.AlbumsRowChanged(this, new AlbumsRowChangeEvent(((AlbumsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AlbumsRowChanging != null)) {
                    this.AlbumsRowChanging(this, new AlbumsRowChangeEvent(((AlbumsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AlbumsRowDeleted != null)) {
                    this.AlbumsRowDeleted(this, new AlbumsRowChangeEvent(((AlbumsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AlbumsRowDeleting != null)) {
                    this.AlbumsRowDeleting(this, new AlbumsRowChangeEvent(((AlbumsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAlbumsRow(AlbumsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlbumsRow : DataRow {
            
            private AlbumsDataTable tableAlbums;
            
            internal AlbumsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAlbums = ((AlbumsDataTable)(this.Table));
            }
            
            public int Album_ID {
                get {
                    try {
                        return ((int)(this[this.tableAlbums.Album_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.Album_IDColumn] = value;
                }
            }
            
            public string Artist {
                get {
                    return ((string)(this[this.tableAlbums.ArtistColumn]));
                }
                set {
                    this[this.tableAlbums.ArtistColumn] = value;
                }
            }
            
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.CategoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.CategoryColumn] = value;
                }
            }
            
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.CommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.CommentsColumn] = value;
                }
            }
            
            public int Cuts {
                get {
                    try {
                        return ((int)(this[this.tableAlbums.CutsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.CutsColumn] = value;
                }
            }
            
            public int DiscID {
                get {
                    return ((int)(this[this.tableAlbums.DiscIDColumn]));
                }
                set {
                    this[this.tableAlbums.DiscIDColumn] = value;
                }
            }
            
            public string Extra {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.ExtraColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.ExtraColumn] = value;
                }
            }
            
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.LabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.LabelColumn] = value;
                }
            }
            
            public string LargeCoverURL {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.LargeCoverURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.LargeCoverURLColumn] = value;
                }
            }
            
            public string MoreInfoURL {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.MoreInfoURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.MoreInfoURLColumn] = value;
                }
            }
            
            public bool Need_Cut_Names_Expanded {
                get {
                    try {
                        return ((bool)(this[this.tableAlbums.Need_Cut_Names_ExpandedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.Need_Cut_Names_ExpandedColumn] = value;
                }
            }
            
            public bool Not_Found_on_web {
                get {
                    try {
                        return ((bool)(this[this.tableAlbums.Not_Found_on_webColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.Not_Found_on_webColumn] = value;
                }
            }
            
            public string Owner {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.OwnerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.OwnerColumn] = value;
                }
            }
            
            public int PlayLengthInSeconds {
                get {
                    try {
                        return ((int)(this[this.tableAlbums.PlayLengthInSecondsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.PlayLengthInSecondsColumn] = value;
                }
            }
            
            public string Release_Date {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.Release_DateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.Release_DateColumn] = value;
                }
            }
            
            public string Site {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.SiteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.SiteColumn] = value;
                }
            }
            
            public string SmallCoverURL {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.SmallCoverURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.SmallCoverURLColumn] = value;
                }
            }
            
            public string Style {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.StyleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.StyleColumn] = value;
                }
            }
            
            public string Title {
                get {
                    return ((string)(this[this.tableAlbums.TitleColumn]));
                }
                set {
                    this[this.tableAlbums.TitleColumn] = value;
                }
            }
            
            public int TotalLengthInFrames {
                get {
                    try {
                        return ((int)(this[this.tableAlbums.TotalLengthInFramesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.TotalLengthInFramesColumn] = value;
                }
            }
            
            public int TotalLengthInSeconds {
                get {
                    try {
                        return ((int)(this[this.tableAlbums.TotalLengthInSecondsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.TotalLengthInSecondsColumn] = value;
                }
            }
            
            public System.DateTime TotalTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableAlbums.TotalTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.TotalTimeColumn] = value;
                }
            }
            
            public bool Vetted {
                get {
                    try {
                        return ((bool)(this[this.tableAlbums.VettedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.VettedColumn] = value;
                }
            }
            
            public string XML {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.XMLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.XMLColumn] = value;
                }
            }
            
            public string XML2 {
                get {
                    try {
                        return ((string)(this[this.tableAlbums.XML2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlbums.XML2Column] = value;
                }
            }
            
            public bool IsAlbum_IDNull() {
                return this.IsNull(this.tableAlbums.Album_IDColumn);
            }
            
            public void SetAlbum_IDNull() {
                this[this.tableAlbums.Album_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCategoryNull() {
                return this.IsNull(this.tableAlbums.CategoryColumn);
            }
            
            public void SetCategoryNull() {
                this[this.tableAlbums.CategoryColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentsNull() {
                return this.IsNull(this.tableAlbums.CommentsColumn);
            }
            
            public void SetCommentsNull() {
                this[this.tableAlbums.CommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsCutsNull() {
                return this.IsNull(this.tableAlbums.CutsColumn);
            }
            
            public void SetCutsNull() {
                this[this.tableAlbums.CutsColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtraNull() {
                return this.IsNull(this.tableAlbums.ExtraColumn);
            }
            
            public void SetExtraNull() {
                this[this.tableAlbums.ExtraColumn] = System.Convert.DBNull;
            }
            
            public bool IsLabelNull() {
                return this.IsNull(this.tableAlbums.LabelColumn);
            }
            
            public void SetLabelNull() {
                this[this.tableAlbums.LabelColumn] = System.Convert.DBNull;
            }
            
            public bool IsLargeCoverURLNull() {
                return this.IsNull(this.tableAlbums.LargeCoverURLColumn);
            }
            
            public void SetLargeCoverURLNull() {
                this[this.tableAlbums.LargeCoverURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsMoreInfoURLNull() {
                return this.IsNull(this.tableAlbums.MoreInfoURLColumn);
            }
            
            public void SetMoreInfoURLNull() {
                this[this.tableAlbums.MoreInfoURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsNeed_Cut_Names_ExpandedNull() {
                return this.IsNull(this.tableAlbums.Need_Cut_Names_ExpandedColumn);
            }
            
            public void SetNeed_Cut_Names_ExpandedNull() {
                this[this.tableAlbums.Need_Cut_Names_ExpandedColumn] = System.Convert.DBNull;
            }
            
            public bool IsNot_Found_on_webNull() {
                return this.IsNull(this.tableAlbums.Not_Found_on_webColumn);
            }
            
            public void SetNot_Found_on_webNull() {
                this[this.tableAlbums.Not_Found_on_webColumn] = System.Convert.DBNull;
            }
            
            public bool IsOwnerNull() {
                return this.IsNull(this.tableAlbums.OwnerColumn);
            }
            
            public void SetOwnerNull() {
                this[this.tableAlbums.OwnerColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlayLengthInSecondsNull() {
                return this.IsNull(this.tableAlbums.PlayLengthInSecondsColumn);
            }
            
            public void SetPlayLengthInSecondsNull() {
                this[this.tableAlbums.PlayLengthInSecondsColumn] = System.Convert.DBNull;
            }
            
            public bool IsRelease_DateNull() {
                return this.IsNull(this.tableAlbums.Release_DateColumn);
            }
            
            public void SetRelease_DateNull() {
                this[this.tableAlbums.Release_DateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSiteNull() {
                return this.IsNull(this.tableAlbums.SiteColumn);
            }
            
            public void SetSiteNull() {
                this[this.tableAlbums.SiteColumn] = System.Convert.DBNull;
            }
            
            public bool IsSmallCoverURLNull() {
                return this.IsNull(this.tableAlbums.SmallCoverURLColumn);
            }
            
            public void SetSmallCoverURLNull() {
                this[this.tableAlbums.SmallCoverURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsStyleNull() {
                return this.IsNull(this.tableAlbums.StyleColumn);
            }
            
            public void SetStyleNull() {
                this[this.tableAlbums.StyleColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalLengthInFramesNull() {
                return this.IsNull(this.tableAlbums.TotalLengthInFramesColumn);
            }
            
            public void SetTotalLengthInFramesNull() {
                this[this.tableAlbums.TotalLengthInFramesColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalLengthInSecondsNull() {
                return this.IsNull(this.tableAlbums.TotalLengthInSecondsColumn);
            }
            
            public void SetTotalLengthInSecondsNull() {
                this[this.tableAlbums.TotalLengthInSecondsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalTimeNull() {
                return this.IsNull(this.tableAlbums.TotalTimeColumn);
            }
            
            public void SetTotalTimeNull() {
                this[this.tableAlbums.TotalTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsVettedNull() {
                return this.IsNull(this.tableAlbums.VettedColumn);
            }
            
            public void SetVettedNull() {
                this[this.tableAlbums.VettedColumn] = System.Convert.DBNull;
            }
            
            public bool IsXMLNull() {
                return this.IsNull(this.tableAlbums.XMLColumn);
            }
            
            public void SetXMLNull() {
                this[this.tableAlbums.XMLColumn] = System.Convert.DBNull;
            }
            
            public bool IsXML2Null() {
                return this.IsNull(this.tableAlbums.XML2Column);
            }
            
            public void SetXML2Null() {
                this[this.tableAlbums.XML2Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlbumsRowChangeEvent : EventArgs {
            
            private AlbumsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AlbumsRowChangeEvent(AlbumsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AlbumsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
