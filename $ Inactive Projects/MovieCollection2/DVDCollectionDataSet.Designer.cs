//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MovieCollection2 {
	using System;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
	[System.Xml.Serialization.XmlRootAttribute("DVDCollectionDataSet")]
	[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
	public partial class DVDCollectionDataSet : System.Data.DataSet {

		private DVDsDataTable tableDVDs;

		private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public DVDCollectionDataSet() {
			this.BeginInit();
			this.InitClass();
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			base.Relations.CollectionChanged += schemaChangedHandler;
			this.EndInit();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected DVDCollectionDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			:
				base(info, context, false) {
			if ((this.IsBinarySerialized(info, context) == true)) {
				this.InitVars(false);
				System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += schemaChangedHandler1;
				this.Relations.CollectionChanged += schemaChangedHandler1;
				return;
			}
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
				System.Data.DataSet ds = new System.Data.DataSet();
				ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
				if ((ds.Tables["DVDs"] != null)) {
					base.Tables.Add(new DVDsDataTable(ds.Tables["DVDs"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			} else {
				this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public DVDsDataTable DVDs {
			get {
				return this.tableDVDs;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.BrowsableAttribute(true)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
		public override System.Data.SchemaSerializationMode SchemaSerializationMode {
			get {
				return this._schemaSerializationMode;
			}
			set {
				this._schemaSerializationMode = value;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new System.Data.DataTableCollection Tables {
			get {
				return base.Tables;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new System.Data.DataRelationCollection Relations {
			get {
				return base.Relations;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void InitializeDerivedDataSet() {
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public override System.Data.DataSet Clone() {
			DVDCollectionDataSet cln = ((DVDCollectionDataSet)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeTables() {
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeRelations() {
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
			if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
				this.Reset();
				System.Data.DataSet ds = new System.Data.DataSet();
				ds.ReadXml(reader);
				if ((ds.Tables["DVDs"] != null)) {
					base.Tables.Add(new DVDsDataTable(ds.Tables["DVDs"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			} else {
				this.ReadXml(reader);
				this.InitVars();
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars() {
			this.InitVars(true);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars(bool initTable) {
			this.tableDVDs = ((DVDsDataTable)(base.Tables["DVDs"]));
			if ((initTable == true)) {
				if ((this.tableDVDs != null)) {
					this.tableDVDs.InitVars();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitClass() {
			this.DataSetName = "DVDCollectionDataSet";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/DVDCollectionDatabaseDataSet.xsd";
			this.EnforceConstraints = true;
			this.tableDVDs = new DVDsDataTable();
			base.Tables.Add(this.tableDVDs);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeDVDs() {
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
			if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
				this.InitVars();
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
			DVDCollectionDataSet ds = new DVDCollectionDataSet();
			System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
			System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
			xs.Add(ds.GetSchemaSerializable());
			System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			return type;
		}

		public delegate void DVDsRowChangeEventHandler(object sender, DVDsRowChangeEvent e);

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class DVDsDataTable : System.Data.DataTable, System.Collections.IEnumerable {

			private System.Data.DataColumn columnID;

			private System.Data.DataColumn columnTitle;

			private System.Data.DataColumn columnDescription;

			private System.Data.DataColumn columnActors;

			private System.Data.DataColumn columnDirector;

			private System.Data.DataColumn columnGenre;

			private System.Data.DataColumn columnLength;

			private System.Data.DataColumn columnRated;

			private System.Data.DataColumn columnYearReleased;

			private System.Data.DataColumn columnUPC;

			private System.Data.DataColumn columnImageLink;

			private System.Data.DataColumn columnImageBinary;

			private System.Data.DataColumn columnWebPageLink;

			private System.Data.DataColumn columnMyRating;

			private System.Data.DataColumn columnComments;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsDataTable() {
				this.TableName = "DVDs";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal DVDsDataTable(System.Data.DataTable table) {
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected DVDsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context) {
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn IDColumn {
				get {
					return this.columnID;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn TitleColumn {
				get {
					return this.columnTitle;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn DescriptionColumn {
				get {
					return this.columnDescription;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn ActorsColumn {
				get {
					return this.columnActors;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn DirectorColumn {
				get {
					return this.columnDirector;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn GenreColumn {
				get {
					return this.columnGenre;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn LengthColumn {
				get {
					return this.columnLength;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn RatedColumn {
				get {
					return this.columnRated;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn YearReleasedColumn {
				get {
					return this.columnYearReleased;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn UPCColumn {
				get {
					return this.columnUPC;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn ImageLinkColumn {
				get {
					return this.columnImageLink;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn ImageBinaryColumn {
				get {
					return this.columnImageBinary;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn WebPageLinkColumn {
				get {
					return this.columnWebPageLink;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn MyRatingColumn {
				get {
					return this.columnMyRating;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn CommentsColumn {
				get {
					return this.columnComments;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsRow this[int index] {
				get {
					return ((DVDsRow)(this.Rows[index]));
				}
			}

			public event DVDsRowChangeEventHandler DVDsRowChanging;

			public event DVDsRowChangeEventHandler DVDsRowChanged;

			public event DVDsRowChangeEventHandler DVDsRowDeleting;

			public event DVDsRowChangeEventHandler DVDsRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddDVDsRow(DVDsRow row) {
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsRow AddDVDsRow(string ID, string Title, string Description, string Actors, string Director, string Genre, int Length, string Rated, string YearReleased, string UPC, string ImageLink, byte[] ImageBinary, string WebPageLink, int MyRating, string Comments) {
				DVDsRow rowDVDsRow = ((DVDsRow)(this.NewRow()));
				rowDVDsRow.ItemArray = new object[] {
                        ID,
                        Title,
                        Description,
                        Actors,
                        Director,
                        Genre,
                        Length,
                        Rated,
                        YearReleased,
                        UPC,
                        ImageLink,
                        ImageBinary,
                        WebPageLink,
                        MyRating,
                        Comments};
				this.Rows.Add(rowDVDsRow);
				return rowDVDsRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsRow FindByID(string ID) {
				return ((DVDsRow)(this.Rows.Find(new object[] {
                            ID})));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator() {
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone() {
				DVDsDataTable cln = ((DVDsDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance() {
				return new DVDsDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars() {
				this.columnID = base.Columns["ID"];
				this.columnTitle = base.Columns["Title"];
				this.columnDescription = base.Columns["Description"];
				this.columnActors = base.Columns["Actors"];
				this.columnDirector = base.Columns["Director"];
				this.columnGenre = base.Columns["Genre"];
				this.columnLength = base.Columns["Length"];
				this.columnRated = base.Columns["Rated"];
				this.columnYearReleased = base.Columns["YearReleased"];
				this.columnUPC = base.Columns["UPC"];
				this.columnImageLink = base.Columns["ImageLink"];
				this.columnImageBinary = base.Columns["ImageBinary"];
				this.columnWebPageLink = base.Columns["WebPageLink"];
				this.columnMyRating = base.Columns["MyRating"];
				this.columnComments = base.Columns["Comments"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass() {
				this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnTitle);
				this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnDescription);
				this.columnActors = new System.Data.DataColumn("Actors", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnActors);
				this.columnDirector = new System.Data.DataColumn("Director", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnDirector);
				this.columnGenre = new System.Data.DataColumn("Genre", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnGenre);
				this.columnLength = new System.Data.DataColumn("Length", typeof(int), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnLength);
				this.columnRated = new System.Data.DataColumn("Rated", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnRated);
				this.columnYearReleased = new System.Data.DataColumn("YearReleased", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnYearReleased);
				this.columnUPC = new System.Data.DataColumn("UPC", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnUPC);
				this.columnImageLink = new System.Data.DataColumn("ImageLink", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnImageLink);
				this.columnImageBinary = new System.Data.DataColumn("ImageBinary", typeof(byte[]), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnImageBinary);
				this.columnWebPageLink = new System.Data.DataColumn("WebPageLink", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnWebPageLink);
				this.columnMyRating = new System.Data.DataColumn("MyRating", typeof(int), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnMyRating);
				this.columnComments = new System.Data.DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
				base.Columns.Add(this.columnComments);
				this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
				this.columnID.AllowDBNull = false;
				this.columnID.Unique = true;
				this.columnID.MaxLength = 50;
				this.columnTitle.MaxLength = 255;
				this.columnDescription.MaxLength = 2147483647;
				this.columnActors.MaxLength = 255;
				this.columnDirector.MaxLength = 255;
				this.columnGenre.MaxLength = 255;
				this.columnRated.MaxLength = 50;
				this.columnYearReleased.MaxLength = 50;
				this.columnUPC.MaxLength = 50;
				this.columnImageLink.MaxLength = 2147483647;
				this.columnWebPageLink.MaxLength = 2147483647;
				this.columnComments.MaxLength = 2147483647;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsRow NewDVDsRow() {
				return ((DVDsRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
				return new DVDsRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType() {
				return typeof(DVDsRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.DVDsRowChanged != null)) {
					this.DVDsRowChanged(this, new DVDsRowChangeEvent(((DVDsRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.DVDsRowChanging != null)) {
					this.DVDsRowChanging(this, new DVDsRowChangeEvent(((DVDsRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.DVDsRowDeleted != null)) {
					this.DVDsRowDeleted(this, new DVDsRowChangeEvent(((DVDsRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.DVDsRowDeleting != null)) {
					this.DVDsRowDeleting(this, new DVDsRowChangeEvent(((DVDsRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemoveDVDsRow(DVDsRow row) {
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				DVDCollectionDataSet ds = new DVDCollectionDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "DVDsDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class DVDsRow : System.Data.DataRow {

			private DVDsDataTable tableDVDs;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal DVDsRow(System.Data.DataRowBuilder rb)
				:
					base(rb) {
				this.tableDVDs = ((DVDsDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string ID {
				get {
					return ((string)(this[this.tableDVDs.IDColumn]));
				}
				set {
					this[this.tableDVDs.IDColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Title {
				get {
					try {
						return ((string)(this[this.tableDVDs.TitleColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.TitleColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Description {
				get {
					try {
						return ((string)(this[this.tableDVDs.DescriptionColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.DescriptionColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Actors {
				get {
					try {
						return ((string)(this[this.tableDVDs.ActorsColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Actors\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.ActorsColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Director {
				get {
					try {
						return ((string)(this[this.tableDVDs.DirectorColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Director\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.DirectorColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Genre {
				get {
					try {
						return ((string)(this[this.tableDVDs.GenreColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Genre\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.GenreColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int Length {
				get {
					try {
						return ((int)(this[this.tableDVDs.LengthColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Length\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.LengthColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Rated {
				get {
					try {
						return ((string)(this[this.tableDVDs.RatedColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Rated\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.RatedColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string YearReleased {
				get {
					try {
						return ((string)(this[this.tableDVDs.YearReleasedColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'YearReleased\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.YearReleasedColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string UPC {
				get {
					try {
						return ((string)(this[this.tableDVDs.UPCColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'UPC\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.UPCColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string ImageLink {
				get {
					try {
						return ((string)(this[this.tableDVDs.ImageLinkColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'ImageLink\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.ImageLinkColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public byte[] ImageBinary {
				get {
					try {
						return ((byte[])(this[this.tableDVDs.ImageBinaryColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'ImageBinary\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.ImageBinaryColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string WebPageLink {
				get {
					try {
						return ((string)(this[this.tableDVDs.WebPageLinkColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'WebPageLink\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.WebPageLinkColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int MyRating {
				get {
					try {
						return ((int)(this[this.tableDVDs.MyRatingColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'MyRating\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.MyRatingColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string Comments {
				get {
					try {
						return ((string)(this[this.tableDVDs.CommentsColumn]));
					} catch (System.InvalidCastException e) {
						throw new System.Data.StrongTypingException("The value for column \'Comments\' in table \'DVDs\' is DBNull.", e);
					}
				}
				set {
					this[this.tableDVDs.CommentsColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsTitleNull() {
				return this.IsNull(this.tableDVDs.TitleColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetTitleNull() {
				this[this.tableDVDs.TitleColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsDescriptionNull() {
				return this.IsNull(this.tableDVDs.DescriptionColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetDescriptionNull() {
				this[this.tableDVDs.DescriptionColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsActorsNull() {
				return this.IsNull(this.tableDVDs.ActorsColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetActorsNull() {
				this[this.tableDVDs.ActorsColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsDirectorNull() {
				return this.IsNull(this.tableDVDs.DirectorColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetDirectorNull() {
				this[this.tableDVDs.DirectorColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsGenreNull() {
				return this.IsNull(this.tableDVDs.GenreColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetGenreNull() {
				this[this.tableDVDs.GenreColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsLengthNull() {
				return this.IsNull(this.tableDVDs.LengthColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetLengthNull() {
				this[this.tableDVDs.LengthColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsRatedNull() {
				return this.IsNull(this.tableDVDs.RatedColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetRatedNull() {
				this[this.tableDVDs.RatedColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsYearReleasedNull() {
				return this.IsNull(this.tableDVDs.YearReleasedColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetYearReleasedNull() {
				this[this.tableDVDs.YearReleasedColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsUPCNull() {
				return this.IsNull(this.tableDVDs.UPCColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetUPCNull() {
				this[this.tableDVDs.UPCColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsImageLinkNull() {
				return this.IsNull(this.tableDVDs.ImageLinkColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetImageLinkNull() {
				this[this.tableDVDs.ImageLinkColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsImageBinaryNull() {
				return this.IsNull(this.tableDVDs.ImageBinaryColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetImageBinaryNull() {
				this[this.tableDVDs.ImageBinaryColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsWebPageLinkNull() {
				return this.IsNull(this.tableDVDs.WebPageLinkColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetWebPageLinkNull() {
				this[this.tableDVDs.WebPageLinkColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsMyRatingNull() {
				return this.IsNull(this.tableDVDs.MyRatingColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetMyRatingNull() {
				this[this.tableDVDs.MyRatingColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsCommentsNull() {
				return this.IsNull(this.tableDVDs.CommentsColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetCommentsNull() {
				this[this.tableDVDs.CommentsColumn] = System.Convert.DBNull;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class DVDsRowChangeEvent : System.EventArgs {

			private DVDsRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsRowChangeEvent(DVDsRow row, System.Data.DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DVDsRow Row {
				get {
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
	}
}
namespace MovieCollection2.DVDCollectionDataSetTableAdapters {


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[System.ComponentModel.DataObjectAttribute(true)]
	[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
		", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class DVDsTableAdapter : System.ComponentModel.Component {

		private System.Data.SqlClient.SqlDataAdapter _adapter;

		private System.Data.SqlClient.SqlConnection _connection;

		private System.Data.SqlClient.SqlCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public DVDsTableAdapter() {
			this.ClearBeforeFill = true;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private System.Data.SqlClient.SqlDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal System.Data.SqlClient.SqlConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((this.Adapter.InsertCommand != null)) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((this.Adapter.DeleteCommand != null)) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((this.Adapter.UpdateCommand != null)) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
					if ((this.CommandCollection[i] != null)) {
						((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
					}
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected System.Data.SqlClient.SqlCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public bool ClearBeforeFill {
			get {
				return this._clearBeforeFill;
			}
			set {
				this._clearBeforeFill = value;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitAdapter() {
			this._adapter = new System.Data.SqlClient.SqlDataAdapter();
			System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "DVDs";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("Title", "Title");
			tableMapping.ColumnMappings.Add("Description", "Description");
			tableMapping.ColumnMappings.Add("Actors", "Actors");
			tableMapping.ColumnMappings.Add("Director", "Director");
			tableMapping.ColumnMappings.Add("Genre", "Genre");
			tableMapping.ColumnMappings.Add("Length", "Length");
			tableMapping.ColumnMappings.Add("Rated", "Rated");
			tableMapping.ColumnMappings.Add("YearReleased", "YearReleased");
			tableMapping.ColumnMappings.Add("UPC", "UPC");
			tableMapping.ColumnMappings.Add("ImageLink", "ImageLink");
			tableMapping.ColumnMappings.Add("ImageBinary", "ImageBinary");
			tableMapping.ColumnMappings.Add("WebPageLink", "WebPageLink");
			tableMapping.ColumnMappings.Add("MyRating", "MyRating");
			tableMapping.ColumnMappings.Add("Comments", "Comments");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DVDs] WHERE (([ID] = @Original_ID) AND ((@IsNull_Title = 1 AND [Title] IS NULL) OR ([Title] = @Original_Title)) AND ((@IsNull_Actors = 1 AND [Actors] IS NULL) OR ([Actors] = @Original_Actors)) AND ((@IsNull_Director = 1 AND [Director] IS NULL) OR ([Director] = @Original_Director)) AND ((@IsNull_Genre = 1 AND [Genre] IS NULL) OR ([Genre] = @Original_Genre)) AND ((@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND ((@IsNull_Rated = 1 AND [Rated] IS NULL) OR ([Rated] = @Original_Rated)) AND ((@IsNull_YearReleased = 1 AND [YearReleased] IS NULL) OR ([YearReleased] = @Original_YearReleased)) AND ((@IsNull_UPC = 1 AND [UPC] IS NULL) OR ([UPC] = @Original_UPC)) AND ((@IsNull_ImageLink = 1 AND [ImageLink] IS NULL) OR ([ImageLink] = @Original_ImageLink)) AND ((@IsNull_WebPageLink = 1 AND [WebPageLink] IS NULL) OR ([WebPageLink] = @Original_WebPageLink)) AND ((@IsNull_MyRating = 1 AND [MyRating] IS NULL) OR ([MyRating] = @Original_MyRating)))";
			this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Actors", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Director", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Genre", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Rated", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_YearReleased", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UPC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ImageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_WebPageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DVDs] ([ID], [Title], [Description], [Actors], [Director], [Genre], [Length], [Rated], [YearReleased], [UPC], [ImageLink], [ImageBinary], [WebPageLink], [MyRating], [Comments]) VALUES (@ID, @Title, @Description, @Actors, @Director, @Genre, @Length, @Rated, @YearReleased, @UPC, @ImageLink, @ImageBinary, @WebPageLink, @MyRating, @Comments);
SELECT ID, Title, Description, Actors, Director, Genre, Length, Rated, YearReleased, UPC, ImageLink, ImageBinary, WebPageLink, MyRating, Comments FROM DVDs WHERE (ID = @ID)";
			this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ImageBinary", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageBinary", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Comments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DVDs] SET [ID] = @ID, [Title] = @Title, [Description] = @Descriptio" +
				"n, [Actors] = @Actors, [Director] = @Director, [Genre] = @Genre, [Length] = @Len" +
				"gth, [Rated] = @Rated, [YearReleased] = @YearReleased, [UPC] = @UPC, [ImageLink]" +
				" = @ImageLink, [ImageBinary] = @ImageBinary, [WebPageLink] = @WebPageLink, [MyRa" +
				"ting] = @MyRating, [Comments] = @Comments WHERE (([ID] = @Original_ID) AND ((@Is" +
				"Null_Title = 1 AND [Title] IS NULL) OR ([Title] = @Original_Title)) AND ((@IsNul" +
				"l_Actors = 1 AND [Actors] IS NULL) OR ([Actors] = @Original_Actors)) AND ((@IsNu" +
				"ll_Director = 1 AND [Director] IS NULL) OR ([Director] = @Original_Director)) AN" +
				"D ((@IsNull_Genre = 1 AND [Genre] IS NULL) OR ([Genre] = @Original_Genre)) AND (" +
				"(@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND " +
				"((@IsNull_Rated = 1 AND [Rated] IS NULL) OR ([Rated] = @Original_Rated)) AND ((@" +
				"IsNull_YearReleased = 1 AND [YearReleased] IS NULL) OR ([YearReleased] = @Origin" +
				"al_YearReleased)) AND ((@IsNull_UPC = 1 AND [UPC] IS NULL) OR ([UPC] = @Original" +
				"_UPC)) AND ((@IsNull_ImageLink = 1 AND [ImageLink] IS NULL) OR ([ImageLink] = @O" +
				"riginal_ImageLink)) AND ((@IsNull_WebPageLink = 1 AND [WebPageLink] IS NULL) OR " +
				"([WebPageLink] = @Original_WebPageLink)) AND ((@IsNull_MyRating = 1 AND [MyRatin" +
				"g] IS NULL) OR ([MyRating] = @Original_MyRating)));\r\nSELECT ID, Title, Descripti" +
				"on, Actors, Director, Genre, Length, Rated, YearReleased, UPC, ImageLink, ImageB" +
				"inary, WebPageLink, MyRating, Comments FROM DVDs WHERE (ID = @ID)";
			this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ImageBinary", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageBinary", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Comments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Actors", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Director", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Genre", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Rated", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_YearReleased", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UPC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ImageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_WebPageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, true, null, "", "", ""));
			this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, false, null, "", "", ""));
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitConnection() {
			this._connection = new System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::MovieCollection2.Properties.Settings.Default.Connection1;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitCommandCollection() {
			this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
			this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, Title, Description, Actors, Director, Genre, Length, Rated, YearReleas" +
				"ed, UPC, ImageLink, ImageBinary, WebPageLink, MyRating, Comments FROM dbo.DVDs";
			this._commandCollection[0].CommandType = System.Data.CommandType.Text;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(DVDCollectionDataSet.DVDsDataTable dataTable) {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual DVDCollectionDataSet.DVDsDataTable GetData() {
			this.Adapter.SelectCommand = this.CommandCollection[0];
			DVDCollectionDataSet.DVDsDataTable dataTable = new DVDCollectionDataSet.DVDsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(DVDCollectionDataSet.DVDsDataTable dataTable) {
			return this.Adapter.Update(dataTable);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(DVDCollectionDataSet dataSet) {
			return this.Adapter.Update(dataSet, "DVDs");
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(System.Data.DataRow dataRow) {
			return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(System.Data.DataRow[] dataRows) {
			return this.Adapter.Update(dataRows);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(string Original_ID, string Original_Title, string Original_Actors, string Original_Director, string Original_Genre, int Original_Length, string Original_Rated, string Original_YearReleased, string Original_UPC, string Original_ImageLink, string Original_WebPageLink, int Original_MyRating) {
			if ((Original_ID == null)) {
				throw new System.ArgumentNullException("Original_ID");
			} else {
				this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ID));
			}
			if ((Original_Title == null)) {
				throw new System.ArgumentNullException("Original_Title");
			} else {
				this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Title));
			}
			if ((Original_Actors == null)) {
				throw new System.ArgumentNullException("Original_Actors");
			} else {
				this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Actors));
			}
			if ((Original_Director == null)) {
				throw new System.ArgumentNullException("Original_Director");
			} else {
				this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Director));
			}
			if ((Original_Genre == null)) {
				throw new System.ArgumentNullException("Original_Genre");
			} else {
				this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Genre));
			}
			this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
			this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_Length));
			if ((Original_Rated == null)) {
				throw new System.ArgumentNullException("Original_Rated");
			} else {
				this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Rated));
			}
			if ((Original_YearReleased == null)) {
				throw new System.ArgumentNullException("Original_YearReleased");
			} else {
				this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_YearReleased));
			}
			if ((Original_UPC == null)) {
				throw new System.ArgumentNullException("Original_UPC");
			} else {
				this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_UPC));
			}
			if ((Original_ImageLink == null)) {
				throw new System.ArgumentNullException("Original_ImageLink");
			} else {
				this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_ImageLink));
			}
			if ((Original_WebPageLink == null)) {
				throw new System.ArgumentNullException("Original_WebPageLink");
			} else {
				this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
				this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_WebPageLink));
			}
			this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
			this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_MyRating));
			System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open)
						!= System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string ID, string Title, string Description, string Actors, string Director, string Genre, int Length, string Rated, string YearReleased, string UPC, string ImageLink, byte[] ImageBinary, string WebPageLink, int MyRating, string Comments) {
			if ((ID == null)) {
				throw new System.ArgumentNullException("ID");
			} else {
				this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ID));
			}
			if ((Title == null)) {
				throw new System.ArgumentNullException("Title");
			} else {
				this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Title));
			}
			if ((Description == null)) {
				throw new System.ArgumentNullException("Description");
			} else {
				this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Description));
			}
			if ((Actors == null)) {
				throw new System.ArgumentNullException("Actors");
			} else {
				this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Actors));
			}
			if ((Director == null)) {
				throw new System.ArgumentNullException("Director");
			} else {
				this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Director));
			}
			if ((Genre == null)) {
				throw new System.ArgumentNullException("Genre");
			} else {
				this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Genre));
			}
			this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Length));
			if ((Rated == null)) {
				throw new System.ArgumentNullException("Rated");
			} else {
				this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Rated));
			}
			if ((YearReleased == null)) {
				throw new System.ArgumentNullException("YearReleased");
			} else {
				this.Adapter.InsertCommand.Parameters[8].Value = ((string)(YearReleased));
			}
			if ((UPC == null)) {
				throw new System.ArgumentNullException("UPC");
			} else {
				this.Adapter.InsertCommand.Parameters[9].Value = ((string)(UPC));
			}
			if ((ImageLink == null)) {
				throw new System.ArgumentNullException("ImageLink");
			} else {
				this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ImageLink));
			}
			if ((ImageBinary == null)) {
				throw new System.ArgumentNullException("ImageBinary");
			} else {
				this.Adapter.InsertCommand.Parameters[11].Value = ((byte[])(ImageBinary));
			}
			if ((WebPageLink == null)) {
				throw new System.ArgumentNullException("WebPageLink");
			} else {
				this.Adapter.InsertCommand.Parameters[12].Value = ((string)(WebPageLink));
			}
			this.Adapter.InsertCommand.Parameters[13].Value = ((int)(MyRating));
			if ((Comments == null)) {
				throw new System.ArgumentNullException("Comments");
			} else {
				this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Comments));
			}
			System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open)
						!= System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		[System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(
					string ID,
					string Title,
					string Description,
					string Actors,
					string Director,
					string Genre,
					int Length,
					string Rated,
					string YearReleased,
					string UPC,
					string ImageLink,
					byte[] ImageBinary,
					string WebPageLink,
					int MyRating,
					string Comments,
					string Original_ID,
					string Original_Title,
					string Original_Actors,
					string Original_Director,
					string Original_Genre,
					int Original_Length,
					string Original_Rated,
					string Original_YearReleased,
					string Original_UPC,
					string Original_ImageLink,
					string Original_WebPageLink,
					int Original_MyRating) {
			if ((ID == null)) {
				throw new System.ArgumentNullException("ID");
			} else {
				this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ID));
			}
			if ((Title == null)) {
				throw new System.ArgumentNullException("Title");
			} else {
				this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Title));
			}
			if ((Description == null)) {
				throw new System.ArgumentNullException("Description");
			} else {
				this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Description));
			}
			if ((Actors == null)) {
				throw new System.ArgumentNullException("Actors");
			} else {
				this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Actors));
			}
			if ((Director == null)) {
				throw new System.ArgumentNullException("Director");
			} else {
				this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Director));
			}
			if ((Genre == null)) {
				throw new System.ArgumentNullException("Genre");
			} else {
				this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Genre));
			}
			this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Length));
			if ((Rated == null)) {
				throw new System.ArgumentNullException("Rated");
			} else {
				this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Rated));
			}
			if ((YearReleased == null)) {
				throw new System.ArgumentNullException("YearReleased");
			} else {
				this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(YearReleased));
			}
			if ((UPC == null)) {
				throw new System.ArgumentNullException("UPC");
			} else {
				this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(UPC));
			}
			if ((ImageLink == null)) {
				throw new System.ArgumentNullException("ImageLink");
			} else {
				this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ImageLink));
			}
			if ((ImageBinary == null)) {
				throw new System.ArgumentNullException("ImageBinary");
			} else {
				this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(ImageBinary));
			}
			if ((WebPageLink == null)) {
				throw new System.ArgumentNullException("WebPageLink");
			} else {
				this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(WebPageLink));
			}
			this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(MyRating));
			if ((Comments == null)) {
				throw new System.ArgumentNullException("Comments");
			} else {
				this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Comments));
			}
			if ((Original_ID == null)) {
				throw new System.ArgumentNullException("Original_ID");
			} else {
				this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ID));
			}
			if ((Original_Title == null)) {
				throw new System.ArgumentNullException("Original_Title");
			} else {
				this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Title));
			}
			if ((Original_Actors == null)) {
				throw new System.ArgumentNullException("Original_Actors");
			} else {
				this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Actors));
			}
			if ((Original_Director == null)) {
				throw new System.ArgumentNullException("Original_Director");
			} else {
				this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_Director));
			}
			if ((Original_Genre == null)) {
				throw new System.ArgumentNullException("Original_Genre");
			} else {
				this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Genre));
			}
			this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
			this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_Length));
			if ((Original_Rated == null)) {
				throw new System.ArgumentNullException("Original_Rated");
			} else {
				this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_Rated));
			}
			if ((Original_YearReleased == null)) {
				throw new System.ArgumentNullException("Original_YearReleased");
			} else {
				this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_YearReleased));
			}
			if ((Original_UPC == null)) {
				throw new System.ArgumentNullException("Original_UPC");
			} else {
				this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_UPC));
			}
			if ((Original_ImageLink == null)) {
				throw new System.ArgumentNullException("Original_ImageLink");
			} else {
				this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_ImageLink));
			}
			if ((Original_WebPageLink == null)) {
				throw new System.ArgumentNullException("Original_WebPageLink");
			} else {
				this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
				this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_WebPageLink));
			}
			this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
			this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_MyRating));
			System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open)
						!= System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}
}

#pragma warning restore 1591
