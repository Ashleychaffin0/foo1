#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VS2008_1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="lldevel")]
	public partial class LRSDataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblEvent(tblEvent instance);
    partial void UpdatetblEvent(tblEvent instance);
    partial void DeletetblEvent(tblEvent instance);
    #endregion
		
		public LRSDataClasses1DataContext() : 
				base(global::VS2008_1.Properties.Settings.Default.lldevelConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LRSDataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LRSDataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LRSDataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LRSDataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblEvent> tblEvents
		{
			get
			{
				return this.GetTable<tblEvent>();
			}
		}
		
		[Function(Name="dbo.spLL_App_AddEvent")]
		public ISingleResult<spLL_App_AddEventResult> spLL_App_AddEvent([Parameter(Name="EventRCID", DbType="Int")] System.Nullable<int> eventRCID, [Parameter(Name="EventImportOption", DbType="Int")] System.Nullable<int> eventImportOption, [Parameter(Name="EventTimeZone", DbType="Int")] System.Nullable<int> eventTimeZone, [Parameter(Name="EventName", DbType="VarChar(50)")] string eventName, [Parameter(Name="EventStartDate", DbType="DateTime")] System.Nullable<System.DateTime> eventStartDate, [Parameter(Name="EventEndDate", DbType="DateTime")] System.Nullable<System.DateTime> eventEndDate, [Parameter(Name="EventCity", DbType="VarChar(50)")] string eventCity, [Parameter(Name="EventState", DbType="VarChar(50)")] string eventState, [Parameter(Name="EventCountry", DbType="VarChar(50)")] string eventCountry)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventRCID, eventImportOption, eventTimeZone, eventName, eventStartDate, eventEndDate, eventCity, eventState, eventCountry);
			return ((ISingleResult<spLL_App_AddEventResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.tblEvents")]
	public partial class tblEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _EventName;
		
		private System.DateTime _EventStartDate;
		
		private System.DateTime _EventEndDate;
		
		private string _EventCity;
		
		private string _EventState;
		
		private string _EventCountry;
		
		private System.Nullable<int> _EventShowMgmtID;
		
		private int _EventRCID;
		
		private System.Data.Linq.Binary _EventLogo;
		
		private System.Nullable<int> _EvImOpID;
		
		private System.Nullable<int> _ETZID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventStartDateChanging(System.DateTime value);
    partial void OnEventStartDateChanged();
    partial void OnEventEndDateChanging(System.DateTime value);
    partial void OnEventEndDateChanged();
    partial void OnEventCityChanging(string value);
    partial void OnEventCityChanged();
    partial void OnEventStateChanging(string value);
    partial void OnEventStateChanged();
    partial void OnEventCountryChanging(string value);
    partial void OnEventCountryChanged();
    partial void OnEventShowMgmtIDChanging(System.Nullable<int> value);
    partial void OnEventShowMgmtIDChanged();
    partial void OnEventRCIDChanging(int value);
    partial void OnEventRCIDChanged();
    partial void OnEventLogoChanging(System.Data.Linq.Binary value);
    partial void OnEventLogoChanged();
    partial void OnEvImOpIDChanging(System.Nullable<int> value);
    partial void OnEvImOpIDChanged();
    partial void OnETZIDChanging(System.Nullable<int> value);
    partial void OnETZIDChanged();
    #endregion
		
		public tblEvent()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[Column(Storage="_EventStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventStartDate
		{
			get
			{
				return this._EventStartDate;
			}
			set
			{
				if ((this._EventStartDate != value))
				{
					this.OnEventStartDateChanging(value);
					this.SendPropertyChanging();
					this._EventStartDate = value;
					this.SendPropertyChanged("EventStartDate");
					this.OnEventStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EventEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventEndDate
		{
			get
			{
				return this._EventEndDate;
			}
			set
			{
				if ((this._EventEndDate != value))
				{
					this.OnEventEndDateChanging(value);
					this.SendPropertyChanging();
					this._EventEndDate = value;
					this.SendPropertyChanged("EventEndDate");
					this.OnEventEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_EventCity", DbType="VarChar(100)")]
		public string EventCity
		{
			get
			{
				return this._EventCity;
			}
			set
			{
				if ((this._EventCity != value))
				{
					this.OnEventCityChanging(value);
					this.SendPropertyChanging();
					this._EventCity = value;
					this.SendPropertyChanged("EventCity");
					this.OnEventCityChanged();
				}
			}
		}
		
		[Column(Storage="_EventState", DbType="VarChar(50)")]
		public string EventState
		{
			get
			{
				return this._EventState;
			}
			set
			{
				if ((this._EventState != value))
				{
					this.OnEventStateChanging(value);
					this.SendPropertyChanging();
					this._EventState = value;
					this.SendPropertyChanged("EventState");
					this.OnEventStateChanged();
				}
			}
		}
		
		[Column(Storage="_EventCountry", DbType="VarChar(100)")]
		public string EventCountry
		{
			get
			{
				return this._EventCountry;
			}
			set
			{
				if ((this._EventCountry != value))
				{
					this.OnEventCountryChanging(value);
					this.SendPropertyChanging();
					this._EventCountry = value;
					this.SendPropertyChanged("EventCountry");
					this.OnEventCountryChanged();
				}
			}
		}
		
		[Column(Storage="_EventShowMgmtID", DbType="Int")]
		public System.Nullable<int> EventShowMgmtID
		{
			get
			{
				return this._EventShowMgmtID;
			}
			set
			{
				if ((this._EventShowMgmtID != value))
				{
					this.OnEventShowMgmtIDChanging(value);
					this.SendPropertyChanging();
					this._EventShowMgmtID = value;
					this.SendPropertyChanged("EventShowMgmtID");
					this.OnEventShowMgmtIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventRCID", DbType="Int NOT NULL")]
		public int EventRCID
		{
			get
			{
				return this._EventRCID;
			}
			set
			{
				if ((this._EventRCID != value))
				{
					this.OnEventRCIDChanging(value);
					this.SendPropertyChanging();
					this._EventRCID = value;
					this.SendPropertyChanged("EventRCID");
					this.OnEventRCIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventLogo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary EventLogo
		{
			get
			{
				return this._EventLogo;
			}
			set
			{
				if ((this._EventLogo != value))
				{
					this.OnEventLogoChanging(value);
					this.SendPropertyChanging();
					this._EventLogo = value;
					this.SendPropertyChanged("EventLogo");
					this.OnEventLogoChanged();
				}
			}
		}
		
		[Column(Storage="_EvImOpID", DbType="Int")]
		public System.Nullable<int> EvImOpID
		{
			get
			{
				return this._EvImOpID;
			}
			set
			{
				if ((this._EvImOpID != value))
				{
					this.OnEvImOpIDChanging(value);
					this.SendPropertyChanging();
					this._EvImOpID = value;
					this.SendPropertyChanged("EvImOpID");
					this.OnEvImOpIDChanged();
				}
			}
		}
		
		[Column(Storage="_ETZID", DbType="Int")]
		public System.Nullable<int> ETZID
		{
			get
			{
				return this._ETZID;
			}
			set
			{
				if ((this._ETZID != value))
				{
					this.OnETZIDChanging(value);
					this.SendPropertyChanging();
					this._ETZID = value;
					this.SendPropertyChanged("ETZID");
					this.OnETZIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class spLL_App_AddEventResult
	{
		
		private int _EventID;
		
		public spLL_App_AddEventResult()
		{
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
