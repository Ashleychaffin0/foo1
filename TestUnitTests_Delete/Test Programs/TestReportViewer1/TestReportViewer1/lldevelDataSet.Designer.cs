//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TestReportViewer1 {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("lldevelDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class lldevelDataSet : System.Data.DataSet {
        
        private tblAccountsDataTable tabletblAccounts;
        
        private tblEventsDataTable tabletblEvents;
        
        private tblSwipesDataTable tabletblSwipes;
        
        private tblTerminalDataTable tabletblTerminal;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public lldevelDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected lldevelDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblAccounts"] != null)) {
                    base.Tables.Add(new tblAccountsDataTable(ds.Tables["tblAccounts"]));
                }
                if ((ds.Tables["tblEvents"] != null)) {
                    base.Tables.Add(new tblEventsDataTable(ds.Tables["tblEvents"]));
                }
                if ((ds.Tables["tblSwipes"] != null)) {
                    base.Tables.Add(new tblSwipesDataTable(ds.Tables["tblSwipes"]));
                }
                if ((ds.Tables["tblTerminal"] != null)) {
                    base.Tables.Add(new tblTerminalDataTable(ds.Tables["tblTerminal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblAccountsDataTable tblAccounts {
            get {
                return this.tabletblAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblEventsDataTable tblEvents {
            get {
                return this.tabletblEvents;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSwipesDataTable tblSwipes {
            get {
                return this.tabletblSwipes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblTerminalDataTable tblTerminal {
            get {
                return this.tabletblTerminal;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            lldevelDataSet cln = ((lldevelDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblAccounts"] != null)) {
                    base.Tables.Add(new tblAccountsDataTable(ds.Tables["tblAccounts"]));
                }
                if ((ds.Tables["tblEvents"] != null)) {
                    base.Tables.Add(new tblEventsDataTable(ds.Tables["tblEvents"]));
                }
                if ((ds.Tables["tblSwipes"] != null)) {
                    base.Tables.Add(new tblSwipesDataTable(ds.Tables["tblSwipes"]));
                }
                if ((ds.Tables["tblTerminal"] != null)) {
                    base.Tables.Add(new tblTerminalDataTable(ds.Tables["tblTerminal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblAccounts = ((tblAccountsDataTable)(base.Tables["tblAccounts"]));
            if ((initTable == true)) {
                if ((this.tabletblAccounts != null)) {
                    this.tabletblAccounts.InitVars();
                }
            }
            this.tabletblEvents = ((tblEventsDataTable)(base.Tables["tblEvents"]));
            if ((initTable == true)) {
                if ((this.tabletblEvents != null)) {
                    this.tabletblEvents.InitVars();
                }
            }
            this.tabletblSwipes = ((tblSwipesDataTable)(base.Tables["tblSwipes"]));
            if ((initTable == true)) {
                if ((this.tabletblSwipes != null)) {
                    this.tabletblSwipes.InitVars();
                }
            }
            this.tabletblTerminal = ((tblTerminalDataTable)(base.Tables["tblTerminal"]));
            if ((initTable == true)) {
                if ((this.tabletblTerminal != null)) {
                    this.tabletblTerminal.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "lldevelDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/lldevelDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblAccounts = new tblAccountsDataTable();
            base.Tables.Add(this.tabletblAccounts);
            this.tabletblEvents = new tblEventsDataTable();
            base.Tables.Add(this.tabletblEvents);
            this.tabletblSwipes = new tblSwipesDataTable();
            base.Tables.Add(this.tabletblSwipes);
            this.tabletblTerminal = new tblTerminalDataTable();
            base.Tables.Add(this.tabletblTerminal);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblEvents() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSwipes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblTerminal() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            lldevelDataSet ds = new lldevelDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void tblAccountsRowChangeEventHandler(object sender, tblAccountsRowChangeEvent e);
        
        public delegate void tblEventsRowChangeEventHandler(object sender, tblEventsRowChangeEvent e);
        
        public delegate void tblSwipesRowChangeEventHandler(object sender, tblSwipesRowChangeEvent e);
        
        public delegate void tblTerminalRowChangeEventHandler(object sender, tblTerminalRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAcctID;
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnUserID_Original;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnemailAddress;
            
            private System.Data.DataColumn columnCreator;
            
            private System.Data.DataColumn columnAcctType;
            
            private System.Data.DataColumn columnPasswordInPlainText;
            
            private System.Data.DataColumn columnEmailSent;
            
            private System.Data.DataColumn columnActivated;
            
            private System.Data.DataColumn columnEnabled;
            
            private System.Data.DataColumn columnLeadsAccessDuration;
            
            private System.Data.DataColumn columnRequiresCouponCode;
            
            private System.Data.DataColumn columnRCLogo;
            
            private System.Data.DataColumn columnRCContactInfo;
            
            private System.Data.DataColumn columnPwdToBeEmailed;
            
            private System.Data.DataColumn columnAcctIsStandAlone;
            
            private System.Data.DataColumn columnAcctGenerator;
            
            private System.Data.DataColumn columnAcctIsAlive;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsDataTable() {
                this.TableName = "tblAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcctIDColumn {
                get {
                    return this.columnAcctID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserID_OriginalColumn {
                get {
                    return this.columnUserID_Original;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailAddressColumn {
                get {
                    return this.columnemailAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreatorColumn {
                get {
                    return this.columnCreator;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcctTypeColumn {
                get {
                    return this.columnAcctType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordInPlainTextColumn {
                get {
                    return this.columnPasswordInPlainText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailSentColumn {
                get {
                    return this.columnEmailSent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActivatedColumn {
                get {
                    return this.columnActivated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnabledColumn {
                get {
                    return this.columnEnabled;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeadsAccessDurationColumn {
                get {
                    return this.columnLeadsAccessDuration;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RequiresCouponCodeColumn {
                get {
                    return this.columnRequiresCouponCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCLogoColumn {
                get {
                    return this.columnRCLogo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCContactInfoColumn {
                get {
                    return this.columnRCContactInfo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PwdToBeEmailedColumn {
                get {
                    return this.columnPwdToBeEmailed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcctIsStandAloneColumn {
                get {
                    return this.columnAcctIsStandAlone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcctGeneratorColumn {
                get {
                    return this.columnAcctGenerator;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcctIsAliveColumn {
                get {
                    return this.columnAcctIsAlive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsRow this[int index] {
                get {
                    return ((tblAccountsRow)(this.Rows[index]));
                }
            }
            
            public event tblAccountsRowChangeEventHandler tblAccountsRowChanging;
            
            public event tblAccountsRowChangeEventHandler tblAccountsRowChanged;
            
            public event tblAccountsRowChangeEventHandler tblAccountsRowDeleting;
            
            public event tblAccountsRowChangeEventHandler tblAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblAccountsRow(tblAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsRow AddtblAccountsRow(
                        string UserID, 
                        string UserID_Original, 
                        string Password, 
                        string FirstName, 
                        string LastName, 
                        string emailAddress, 
                        int Creator, 
                        byte AcctType, 
                        string PasswordInPlainText, 
                        byte EmailSent, 
                        bool Activated, 
                        bool Enabled, 
                        int LeadsAccessDuration, 
                        bool RequiresCouponCode, 
                        byte[] RCLogo, 
                        string RCContactInfo, 
                        string PwdToBeEmailed, 
                        bool AcctIsStandAlone, 
                        byte AcctGenerator, 
                        bool AcctIsAlive) {
                tblAccountsRow rowtblAccountsRow = ((tblAccountsRow)(this.NewRow()));
                rowtblAccountsRow.ItemArray = new object[] {
                        null,
                        UserID,
                        UserID_Original,
                        Password,
                        FirstName,
                        LastName,
                        emailAddress,
                        Creator,
                        AcctType,
                        PasswordInPlainText,
                        EmailSent,
                        Activated,
                        Enabled,
                        LeadsAccessDuration,
                        RequiresCouponCode,
                        RCLogo,
                        RCContactInfo,
                        PwdToBeEmailed,
                        AcctIsStandAlone,
                        AcctGenerator,
                        AcctIsAlive};
                this.Rows.Add(rowtblAccountsRow);
                return rowtblAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsRow FindByAcctID(int AcctID) {
                return ((tblAccountsRow)(this.Rows.Find(new object[] {
                            AcctID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblAccountsDataTable cln = ((tblAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAcctID = base.Columns["AcctID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnUserID_Original = base.Columns["UserID_Original"];
                this.columnPassword = base.Columns["Password"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnemailAddress = base.Columns["emailAddress"];
                this.columnCreator = base.Columns["Creator"];
                this.columnAcctType = base.Columns["AcctType"];
                this.columnPasswordInPlainText = base.Columns["PasswordInPlainText"];
                this.columnEmailSent = base.Columns["EmailSent"];
                this.columnActivated = base.Columns["Activated"];
                this.columnEnabled = base.Columns["Enabled"];
                this.columnLeadsAccessDuration = base.Columns["LeadsAccessDuration"];
                this.columnRequiresCouponCode = base.Columns["RequiresCouponCode"];
                this.columnRCLogo = base.Columns["RCLogo"];
                this.columnRCContactInfo = base.Columns["RCContactInfo"];
                this.columnPwdToBeEmailed = base.Columns["PwdToBeEmailed"];
                this.columnAcctIsStandAlone = base.Columns["AcctIsStandAlone"];
                this.columnAcctGenerator = base.Columns["AcctGenerator"];
                this.columnAcctIsAlive = base.Columns["AcctIsAlive"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAcctID = new System.Data.DataColumn("AcctID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctID);
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserID_Original = new System.Data.DataColumn("UserID_Original", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID_Original);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnemailAddress = new System.Data.DataColumn("emailAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemailAddress);
                this.columnCreator = new System.Data.DataColumn("Creator", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreator);
                this.columnAcctType = new System.Data.DataColumn("AcctType", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctType);
                this.columnPasswordInPlainText = new System.Data.DataColumn("PasswordInPlainText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPasswordInPlainText);
                this.columnEmailSent = new System.Data.DataColumn("EmailSent", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailSent);
                this.columnActivated = new System.Data.DataColumn("Activated", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivated);
                this.columnEnabled = new System.Data.DataColumn("Enabled", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnabled);
                this.columnLeadsAccessDuration = new System.Data.DataColumn("LeadsAccessDuration", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeadsAccessDuration);
                this.columnRequiresCouponCode = new System.Data.DataColumn("RequiresCouponCode", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequiresCouponCode);
                this.columnRCLogo = new System.Data.DataColumn("RCLogo", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCLogo);
                this.columnRCContactInfo = new System.Data.DataColumn("RCContactInfo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCContactInfo);
                this.columnPwdToBeEmailed = new System.Data.DataColumn("PwdToBeEmailed", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPwdToBeEmailed);
                this.columnAcctIsStandAlone = new System.Data.DataColumn("AcctIsStandAlone", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctIsStandAlone);
                this.columnAcctGenerator = new System.Data.DataColumn("AcctGenerator", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctGenerator);
                this.columnAcctIsAlive = new System.Data.DataColumn("AcctIsAlive", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctIsAlive);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAcctID}, true));
                this.columnAcctID.AutoIncrement = true;
                this.columnAcctID.AllowDBNull = false;
                this.columnAcctID.ReadOnly = true;
                this.columnAcctID.Unique = true;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.MaxLength = 50;
                this.columnUserID_Original.AllowDBNull = false;
                this.columnUserID_Original.MaxLength = 50;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 50;
                this.columnemailAddress.MaxLength = 80;
                this.columnCreator.AllowDBNull = false;
                this.columnAcctType.AllowDBNull = false;
                this.columnPasswordInPlainText.MaxLength = 50;
                this.columnEnabled.AllowDBNull = false;
                this.columnLeadsAccessDuration.AllowDBNull = false;
                this.columnRCContactInfo.MaxLength = 500;
                this.columnPwdToBeEmailed.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsRow NewtblAccountsRow() {
                return ((tblAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblAccountsRowChanged != null)) {
                    this.tblAccountsRowChanged(this, new tblAccountsRowChangeEvent(((tblAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblAccountsRowChanging != null)) {
                    this.tblAccountsRowChanging(this, new tblAccountsRowChangeEvent(((tblAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblAccountsRowDeleted != null)) {
                    this.tblAccountsRowDeleted(this, new tblAccountsRowChangeEvent(((tblAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblAccountsRowDeleting != null)) {
                    this.tblAccountsRowDeleting(this, new tblAccountsRowChangeEvent(((tblAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblAccountsRow(tblAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                lldevelDataSet ds = new lldevelDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblEventsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEventID;
            
            private System.Data.DataColumn columnEventName;
            
            private System.Data.DataColumn columnEventStartDate;
            
            private System.Data.DataColumn columnEventEndDate;
            
            private System.Data.DataColumn columnEventCity;
            
            private System.Data.DataColumn columnEventState;
            
            private System.Data.DataColumn columnEventCountry;
            
            private System.Data.DataColumn columnEventShowMgmtID;
            
            private System.Data.DataColumn columnEventRCID;
            
            private System.Data.DataColumn columnEventLogo;
            
            private System.Data.DataColumn columnEvImOpID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsDataTable() {
                this.TableName = "tblEvents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblEventsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblEventsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventNameColumn {
                get {
                    return this.columnEventName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventStartDateColumn {
                get {
                    return this.columnEventStartDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventEndDateColumn {
                get {
                    return this.columnEventEndDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventCityColumn {
                get {
                    return this.columnEventCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventStateColumn {
                get {
                    return this.columnEventState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventCountryColumn {
                get {
                    return this.columnEventCountry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventShowMgmtIDColumn {
                get {
                    return this.columnEventShowMgmtID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventRCIDColumn {
                get {
                    return this.columnEventRCID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventLogoColumn {
                get {
                    return this.columnEventLogo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EvImOpIDColumn {
                get {
                    return this.columnEvImOpID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsRow this[int index] {
                get {
                    return ((tblEventsRow)(this.Rows[index]));
                }
            }
            
            public event tblEventsRowChangeEventHandler tblEventsRowChanging;
            
            public event tblEventsRowChangeEventHandler tblEventsRowChanged;
            
            public event tblEventsRowChangeEventHandler tblEventsRowDeleting;
            
            public event tblEventsRowChangeEventHandler tblEventsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblEventsRow(tblEventsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsRow AddtblEventsRow(string EventName, System.DateTime EventStartDate, System.DateTime EventEndDate, string EventCity, string EventState, string EventCountry, int EventShowMgmtID, int EventRCID, byte[] EventLogo, int EvImOpID) {
                tblEventsRow rowtblEventsRow = ((tblEventsRow)(this.NewRow()));
                rowtblEventsRow.ItemArray = new object[] {
                        null,
                        EventName,
                        EventStartDate,
                        EventEndDate,
                        EventCity,
                        EventState,
                        EventCountry,
                        EventShowMgmtID,
                        EventRCID,
                        EventLogo,
                        EvImOpID};
                this.Rows.Add(rowtblEventsRow);
                return rowtblEventsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsRow FindByEventID(int EventID) {
                return ((tblEventsRow)(this.Rows.Find(new object[] {
                            EventID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblEventsDataTable cln = ((tblEventsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblEventsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventID = base.Columns["EventID"];
                this.columnEventName = base.Columns["EventName"];
                this.columnEventStartDate = base.Columns["EventStartDate"];
                this.columnEventEndDate = base.Columns["EventEndDate"];
                this.columnEventCity = base.Columns["EventCity"];
                this.columnEventState = base.Columns["EventState"];
                this.columnEventCountry = base.Columns["EventCountry"];
                this.columnEventShowMgmtID = base.Columns["EventShowMgmtID"];
                this.columnEventRCID = base.Columns["EventRCID"];
                this.columnEventLogo = base.Columns["EventLogo"];
                this.columnEvImOpID = base.Columns["EvImOpID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventID = new System.Data.DataColumn("EventID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnEventName = new System.Data.DataColumn("EventName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventName);
                this.columnEventStartDate = new System.Data.DataColumn("EventStartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventStartDate);
                this.columnEventEndDate = new System.Data.DataColumn("EventEndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventEndDate);
                this.columnEventCity = new System.Data.DataColumn("EventCity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventCity);
                this.columnEventState = new System.Data.DataColumn("EventState", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventState);
                this.columnEventCountry = new System.Data.DataColumn("EventCountry", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventCountry);
                this.columnEventShowMgmtID = new System.Data.DataColumn("EventShowMgmtID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventShowMgmtID);
                this.columnEventRCID = new System.Data.DataColumn("EventRCID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventRCID);
                this.columnEventLogo = new System.Data.DataColumn("EventLogo", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventLogo);
                this.columnEvImOpID = new System.Data.DataColumn("EvImOpID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvImOpID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEventID}, true));
                this.columnEventID.AutoIncrement = true;
                this.columnEventID.AllowDBNull = false;
                this.columnEventID.ReadOnly = true;
                this.columnEventID.Unique = true;
                this.columnEventName.AllowDBNull = false;
                this.columnEventName.MaxLength = 100;
                this.columnEventStartDate.AllowDBNull = false;
                this.columnEventEndDate.AllowDBNull = false;
                this.columnEventCity.MaxLength = 100;
                this.columnEventState.MaxLength = 50;
                this.columnEventCountry.MaxLength = 100;
                this.columnEventRCID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsRow NewtblEventsRow() {
                return ((tblEventsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblEventsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblEventsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblEventsRowChanged != null)) {
                    this.tblEventsRowChanged(this, new tblEventsRowChangeEvent(((tblEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblEventsRowChanging != null)) {
                    this.tblEventsRowChanging(this, new tblEventsRowChangeEvent(((tblEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblEventsRowDeleted != null)) {
                    this.tblEventsRowDeleted(this, new tblEventsRowChangeEvent(((tblEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblEventsRowDeleting != null)) {
                    this.tblEventsRowDeleting(this, new tblEventsRowChangeEvent(((tblEventsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblEventsRow(tblEventsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                lldevelDataSet ds = new lldevelDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblEventsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSwipesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSwipeID;
            
            private System.Data.DataColumn columnPersonEventID;
            
            private System.Data.DataColumn columnAcctID;
            
            private System.Data.DataColumn columnEventID;
            
            private System.Data.DataColumn columnSwipeDate;
            
            private System.Data.DataColumn columnTerminalID;
            
            private System.Data.DataColumn columnNotes;
            
            private System.Data.DataColumn columnDataSource;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesDataTable() {
                this.TableName = "tblSwipes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSwipesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSwipesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SwipeIDColumn {
                get {
                    return this.columnSwipeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PersonEventIDColumn {
                get {
                    return this.columnPersonEventID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcctIDColumn {
                get {
                    return this.columnAcctID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SwipeDateColumn {
                get {
                    return this.columnSwipeDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataSourceColumn {
                get {
                    return this.columnDataSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesRow this[int index] {
                get {
                    return ((tblSwipesRow)(this.Rows[index]));
                }
            }
            
            public event tblSwipesRowChangeEventHandler tblSwipesRowChanging;
            
            public event tblSwipesRowChangeEventHandler tblSwipesRowChanged;
            
            public event tblSwipesRowChangeEventHandler tblSwipesRowDeleting;
            
            public event tblSwipesRowChangeEventHandler tblSwipesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSwipesRow(tblSwipesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesRow AddtblSwipesRow(int PersonEventID, int AcctID, int EventID, System.DateTime SwipeDate, int TerminalID, string Notes, byte DataSource) {
                tblSwipesRow rowtblSwipesRow = ((tblSwipesRow)(this.NewRow()));
                rowtblSwipesRow.ItemArray = new object[] {
                        null,
                        PersonEventID,
                        AcctID,
                        EventID,
                        SwipeDate,
                        TerminalID,
                        Notes,
                        DataSource};
                this.Rows.Add(rowtblSwipesRow);
                return rowtblSwipesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesRow FindBySwipeID(int SwipeID) {
                return ((tblSwipesRow)(this.Rows.Find(new object[] {
                            SwipeID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblSwipesDataTable cln = ((tblSwipesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblSwipesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSwipeID = base.Columns["SwipeID"];
                this.columnPersonEventID = base.Columns["PersonEventID"];
                this.columnAcctID = base.Columns["AcctID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnSwipeDate = base.Columns["SwipeDate"];
                this.columnTerminalID = base.Columns["TerminalID"];
                this.columnNotes = base.Columns["Notes"];
                this.columnDataSource = base.Columns["DataSource"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSwipeID = new System.Data.DataColumn("SwipeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwipeID);
                this.columnPersonEventID = new System.Data.DataColumn("PersonEventID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonEventID);
                this.columnAcctID = new System.Data.DataColumn("AcctID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctID);
                this.columnEventID = new System.Data.DataColumn("EventID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnSwipeDate = new System.Data.DataColumn("SwipeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwipeDate);
                this.columnTerminalID = new System.Data.DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalID);
                this.columnNotes = new System.Data.DataColumn("Notes", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnDataSource = new System.Data.DataColumn("DataSource", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSource);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSwipeID}, true));
                this.columnSwipeID.AutoIncrement = true;
                this.columnSwipeID.AllowDBNull = false;
                this.columnSwipeID.ReadOnly = true;
                this.columnSwipeID.Unique = true;
                this.columnPersonEventID.AllowDBNull = false;
                this.columnAcctID.AllowDBNull = false;
                this.columnEventID.AllowDBNull = false;
                this.columnSwipeDate.AllowDBNull = false;
                this.columnTerminalID.AllowDBNull = false;
                this.columnNotes.MaxLength = 2147483647;
                this.columnDataSource.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesRow NewtblSwipesRow() {
                return ((tblSwipesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblSwipesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblSwipesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSwipesRowChanged != null)) {
                    this.tblSwipesRowChanged(this, new tblSwipesRowChangeEvent(((tblSwipesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSwipesRowChanging != null)) {
                    this.tblSwipesRowChanging(this, new tblSwipesRowChangeEvent(((tblSwipesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSwipesRowDeleted != null)) {
                    this.tblSwipesRowDeleted(this, new tblSwipesRowChangeEvent(((tblSwipesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSwipesRowDeleting != null)) {
                    this.tblSwipesRowDeleting(this, new tblSwipesRowChangeEvent(((tblSwipesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSwipesRow(tblSwipesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                lldevelDataSet ds = new lldevelDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSwipesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblTerminalDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTerminalSerial;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalDataTable() {
                this.TableName = "tblTerminal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblTerminalDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblTerminalDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerminalSerialColumn {
                get {
                    return this.columnTerminalSerial;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalRow this[int index] {
                get {
                    return ((tblTerminalRow)(this.Rows[index]));
                }
            }
            
            public event tblTerminalRowChangeEventHandler tblTerminalRowChanging;
            
            public event tblTerminalRowChangeEventHandler tblTerminalRowChanged;
            
            public event tblTerminalRowChangeEventHandler tblTerminalRowDeleting;
            
            public event tblTerminalRowChangeEventHandler tblTerminalRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblTerminalRow(tblTerminalRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalRow AddtblTerminalRow(string TerminalSerial) {
                tblTerminalRow rowtblTerminalRow = ((tblTerminalRow)(this.NewRow()));
                rowtblTerminalRow.ItemArray = new object[] {
                        null,
                        TerminalSerial};
                this.Rows.Add(rowtblTerminalRow);
                return rowtblTerminalRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalRow FindByID(int ID) {
                return ((tblTerminalRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblTerminalDataTable cln = ((tblTerminalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblTerminalDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTerminalSerial = base.Columns["TerminalSerial"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTerminalSerial = new System.Data.DataColumn("TerminalSerial", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalSerial);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTerminalSerial.AllowDBNull = false;
                this.columnTerminalSerial.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalRow NewtblTerminalRow() {
                return ((tblTerminalRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblTerminalRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblTerminalRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblTerminalRowChanged != null)) {
                    this.tblTerminalRowChanged(this, new tblTerminalRowChangeEvent(((tblTerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblTerminalRowChanging != null)) {
                    this.tblTerminalRowChanging(this, new tblTerminalRowChangeEvent(((tblTerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblTerminalRowDeleted != null)) {
                    this.tblTerminalRowDeleted(this, new tblTerminalRowChangeEvent(((tblTerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblTerminalRowDeleting != null)) {
                    this.tblTerminalRowDeleting(this, new tblTerminalRowChangeEvent(((tblTerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblTerminalRow(tblTerminalRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                lldevelDataSet ds = new lldevelDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblTerminalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblAccountsRow : System.Data.DataRow {
            
            private tblAccountsDataTable tabletblAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblAccounts = ((tblAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AcctID {
                get {
                    return ((int)(this[this.tabletblAccounts.AcctIDColumn]));
                }
                set {
                    this[this.tabletblAccounts.AcctIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    return ((string)(this[this.tabletblAccounts.UserIDColumn]));
                }
                set {
                    this[this.tabletblAccounts.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID_Original {
                get {
                    return ((string)(this[this.tabletblAccounts.UserID_OriginalColumn]));
                }
                set {
                    this[this.tabletblAccounts.UserID_OriginalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tabletblAccounts.PasswordColumn]));
                }
                set {
                    this[this.tabletblAccounts.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tabletblAccounts.FirstNameColumn]));
                }
                set {
                    this[this.tabletblAccounts.FirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tabletblAccounts.LastNameColumn]));
                }
                set {
                    this[this.tabletblAccounts.LastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string emailAddress {
                get {
                    try {
                        return ((string)(this[this.tabletblAccounts.emailAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'emailAddress\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.emailAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Creator {
                get {
                    return ((int)(this[this.tabletblAccounts.CreatorColumn]));
                }
                set {
                    this[this.tabletblAccounts.CreatorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AcctType {
                get {
                    return ((byte)(this[this.tabletblAccounts.AcctTypeColumn]));
                }
                set {
                    this[this.tabletblAccounts.AcctTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PasswordInPlainText {
                get {
                    try {
                        return ((string)(this[this.tabletblAccounts.PasswordInPlainTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PasswordInPlainText\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.PasswordInPlainTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte EmailSent {
                get {
                    try {
                        return ((byte)(this[this.tabletblAccounts.EmailSentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmailSent\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.EmailSentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Activated {
                get {
                    try {
                        return ((bool)(this[this.tabletblAccounts.ActivatedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Activated\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.ActivatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Enabled {
                get {
                    return ((bool)(this[this.tabletblAccounts.EnabledColumn]));
                }
                set {
                    this[this.tabletblAccounts.EnabledColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeadsAccessDuration {
                get {
                    return ((int)(this[this.tabletblAccounts.LeadsAccessDurationColumn]));
                }
                set {
                    this[this.tabletblAccounts.LeadsAccessDurationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RequiresCouponCode {
                get {
                    try {
                        return ((bool)(this[this.tabletblAccounts.RequiresCouponCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RequiresCouponCode\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.RequiresCouponCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RCLogo {
                get {
                    try {
                        return ((byte[])(this[this.tabletblAccounts.RCLogoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RCLogo\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.RCLogoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RCContactInfo {
                get {
                    try {
                        return ((string)(this[this.tabletblAccounts.RCContactInfoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RCContactInfo\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.RCContactInfoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PwdToBeEmailed {
                get {
                    try {
                        return ((string)(this[this.tabletblAccounts.PwdToBeEmailedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PwdToBeEmailed\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.PwdToBeEmailedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AcctIsStandAlone {
                get {
                    try {
                        return ((bool)(this[this.tabletblAccounts.AcctIsStandAloneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AcctIsStandAlone\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.AcctIsStandAloneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AcctGenerator {
                get {
                    try {
                        return ((byte)(this[this.tabletblAccounts.AcctGeneratorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AcctGenerator\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.AcctGeneratorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AcctIsAlive {
                get {
                    try {
                        return ((bool)(this[this.tabletblAccounts.AcctIsAliveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AcctIsAlive\' in table \'tblAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblAccounts.AcctIsAliveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailAddressNull() {
                return this.IsNull(this.tabletblAccounts.emailAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailAddressNull() {
                this[this.tabletblAccounts.emailAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordInPlainTextNull() {
                return this.IsNull(this.tabletblAccounts.PasswordInPlainTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordInPlainTextNull() {
                this[this.tabletblAccounts.PasswordInPlainTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailSentNull() {
                return this.IsNull(this.tabletblAccounts.EmailSentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailSentNull() {
                this[this.tabletblAccounts.EmailSentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivatedNull() {
                return this.IsNull(this.tabletblAccounts.ActivatedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivatedNull() {
                this[this.tabletblAccounts.ActivatedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequiresCouponCodeNull() {
                return this.IsNull(this.tabletblAccounts.RequiresCouponCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequiresCouponCodeNull() {
                this[this.tabletblAccounts.RequiresCouponCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRCLogoNull() {
                return this.IsNull(this.tabletblAccounts.RCLogoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRCLogoNull() {
                this[this.tabletblAccounts.RCLogoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRCContactInfoNull() {
                return this.IsNull(this.tabletblAccounts.RCContactInfoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRCContactInfoNull() {
                this[this.tabletblAccounts.RCContactInfoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPwdToBeEmailedNull() {
                return this.IsNull(this.tabletblAccounts.PwdToBeEmailedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPwdToBeEmailedNull() {
                this[this.tabletblAccounts.PwdToBeEmailedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcctIsStandAloneNull() {
                return this.IsNull(this.tabletblAccounts.AcctIsStandAloneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcctIsStandAloneNull() {
                this[this.tabletblAccounts.AcctIsStandAloneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcctGeneratorNull() {
                return this.IsNull(this.tabletblAccounts.AcctGeneratorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcctGeneratorNull() {
                this[this.tabletblAccounts.AcctGeneratorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcctIsAliveNull() {
                return this.IsNull(this.tabletblAccounts.AcctIsAliveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcctIsAliveNull() {
                this[this.tabletblAccounts.AcctIsAliveColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblEventsRow : System.Data.DataRow {
            
            private tblEventsDataTable tabletblEvents;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblEventsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblEvents = ((tblEventsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tabletblEvents.EventIDColumn]));
                }
                set {
                    this[this.tabletblEvents.EventIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventName {
                get {
                    return ((string)(this[this.tabletblEvents.EventNameColumn]));
                }
                set {
                    this[this.tabletblEvents.EventNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventStartDate {
                get {
                    return ((System.DateTime)(this[this.tabletblEvents.EventStartDateColumn]));
                }
                set {
                    this[this.tabletblEvents.EventStartDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventEndDate {
                get {
                    return ((System.DateTime)(this[this.tabletblEvents.EventEndDateColumn]));
                }
                set {
                    this[this.tabletblEvents.EventEndDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventCity {
                get {
                    try {
                        return ((string)(this[this.tabletblEvents.EventCityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EventCity\' in table \'tblEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvents.EventCityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventState {
                get {
                    try {
                        return ((string)(this[this.tabletblEvents.EventStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EventState\' in table \'tblEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvents.EventStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventCountry {
                get {
                    try {
                        return ((string)(this[this.tabletblEvents.EventCountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EventCountry\' in table \'tblEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvents.EventCountryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventShowMgmtID {
                get {
                    try {
                        return ((int)(this[this.tabletblEvents.EventShowMgmtIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EventShowMgmtID\' in table \'tblEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvents.EventShowMgmtIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventRCID {
                get {
                    return ((int)(this[this.tabletblEvents.EventRCIDColumn]));
                }
                set {
                    this[this.tabletblEvents.EventRCIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] EventLogo {
                get {
                    try {
                        return ((byte[])(this[this.tabletblEvents.EventLogoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EventLogo\' in table \'tblEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvents.EventLogoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EvImOpID {
                get {
                    try {
                        return ((int)(this[this.tabletblEvents.EvImOpIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EvImOpID\' in table \'tblEvents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblEvents.EvImOpIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventCityNull() {
                return this.IsNull(this.tabletblEvents.EventCityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventCityNull() {
                this[this.tabletblEvents.EventCityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventStateNull() {
                return this.IsNull(this.tabletblEvents.EventStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventStateNull() {
                this[this.tabletblEvents.EventStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventCountryNull() {
                return this.IsNull(this.tabletblEvents.EventCountryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventCountryNull() {
                this[this.tabletblEvents.EventCountryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventShowMgmtIDNull() {
                return this.IsNull(this.tabletblEvents.EventShowMgmtIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventShowMgmtIDNull() {
                this[this.tabletblEvents.EventShowMgmtIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventLogoNull() {
                return this.IsNull(this.tabletblEvents.EventLogoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventLogoNull() {
                this[this.tabletblEvents.EventLogoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvImOpIDNull() {
                return this.IsNull(this.tabletblEvents.EvImOpIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvImOpIDNull() {
                this[this.tabletblEvents.EvImOpIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSwipesRow : System.Data.DataRow {
            
            private tblSwipesDataTable tabletblSwipes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSwipesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSwipes = ((tblSwipesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SwipeID {
                get {
                    return ((int)(this[this.tabletblSwipes.SwipeIDColumn]));
                }
                set {
                    this[this.tabletblSwipes.SwipeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PersonEventID {
                get {
                    return ((int)(this[this.tabletblSwipes.PersonEventIDColumn]));
                }
                set {
                    this[this.tabletblSwipes.PersonEventIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AcctID {
                get {
                    return ((int)(this[this.tabletblSwipes.AcctIDColumn]));
                }
                set {
                    this[this.tabletblSwipes.AcctIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tabletblSwipes.EventIDColumn]));
                }
                set {
                    this[this.tabletblSwipes.EventIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SwipeDate {
                get {
                    return ((System.DateTime)(this[this.tabletblSwipes.SwipeDateColumn]));
                }
                set {
                    this[this.tabletblSwipes.SwipeDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminalID {
                get {
                    return ((int)(this[this.tabletblSwipes.TerminalIDColumn]));
                }
                set {
                    this[this.tabletblSwipes.TerminalIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tabletblSwipes.NotesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Notes\' in table \'tblSwipes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblSwipes.NotesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DataSource {
                get {
                    return ((byte)(this[this.tabletblSwipes.DataSourceColumn]));
                }
                set {
                    this[this.tabletblSwipes.DataSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tabletblSwipes.NotesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tabletblSwipes.NotesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblTerminalRow : System.Data.DataRow {
            
            private tblTerminalDataTable tabletblTerminal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblTerminalRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblTerminal = ((tblTerminalDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tabletblTerminal.IDColumn]));
                }
                set {
                    this[this.tabletblTerminal.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerminalSerial {
                get {
                    return ((string)(this[this.tabletblTerminal.TerminalSerialColumn]));
                }
                set {
                    this[this.tabletblTerminal.TerminalSerialColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblAccountsRowChangeEvent : System.EventArgs {
            
            private tblAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsRowChangeEvent(tblAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblEventsRowChangeEvent : System.EventArgs {
            
            private tblEventsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsRowChangeEvent(tblEventsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblEventsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSwipesRowChangeEvent : System.EventArgs {
            
            private tblSwipesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesRowChangeEvent(tblSwipesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSwipesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblTerminalRowChangeEvent : System.EventArgs {
            
            private tblTerminalRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalRowChangeEvent(tblTerminalRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblTerminalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TestReportViewer1.lldevelDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblAccountsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblAccountsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblAccounts";
            tableMapping.ColumnMappings.Add("AcctID", "AcctID");
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("UserID_Original", "UserID_Original");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("emailAddress", "emailAddress");
            tableMapping.ColumnMappings.Add("Creator", "Creator");
            tableMapping.ColumnMappings.Add("AcctType", "AcctType");
            tableMapping.ColumnMappings.Add("PasswordInPlainText", "PasswordInPlainText");
            tableMapping.ColumnMappings.Add("EmailSent", "EmailSent");
            tableMapping.ColumnMappings.Add("Activated", "Activated");
            tableMapping.ColumnMappings.Add("Enabled", "Enabled");
            tableMapping.ColumnMappings.Add("LeadsAccessDuration", "LeadsAccessDuration");
            tableMapping.ColumnMappings.Add("RequiresCouponCode", "RequiresCouponCode");
            tableMapping.ColumnMappings.Add("RCLogo", "RCLogo");
            tableMapping.ColumnMappings.Add("RCContactInfo", "RCContactInfo");
            tableMapping.ColumnMappings.Add("PwdToBeEmailed", "PwdToBeEmailed");
            tableMapping.ColumnMappings.Add("AcctIsStandAlone", "AcctIsStandAlone");
            tableMapping.ColumnMappings.Add("AcctGenerator", "AcctGenerator");
            tableMapping.ColumnMappings.Add("AcctIsAlive", "AcctIsAlive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblAccounts] WHERE (([AcctID] = @Original_AcctID) AND ([UserID" +
                "] = @Original_UserID) AND ([UserID_Original] = @Original_UserID_Original) AND ([" +
                "Password] = @Original_Password) AND ([FirstName] = @Original_FirstName) AND ([La" +
                "stName] = @Original_LastName) AND ((@IsNull_emailAddress = 1 AND [emailAddress] " +
                "IS NULL) OR ([emailAddress] = @Original_emailAddress)) AND ([Creator] = @Origina" +
                "l_Creator) AND ([AcctType] = @Original_AcctType) AND ((@IsNull_PasswordInPlainTe" +
                "xt = 1 AND [PasswordInPlainText] IS NULL) OR ([PasswordInPlainText] = @Original_" +
                "PasswordInPlainText)) AND ((@IsNull_EmailSent = 1 AND [EmailSent] IS NULL) OR ([" +
                "EmailSent] = @Original_EmailSent)) AND ((@IsNull_Activated = 1 AND [Activated] I" +
                "S NULL) OR ([Activated] = @Original_Activated)) AND ([Enabled] = @Original_Enabl" +
                "ed) AND ([LeadsAccessDuration] = @Original_LeadsAccessDuration) AND ((@IsNull_Re" +
                "quiresCouponCode = 1 AND [RequiresCouponCode] IS NULL) OR ([RequiresCouponCode] " +
                "= @Original_RequiresCouponCode)) AND ((@IsNull_RCContactInfo = 1 AND [RCContactI" +
                "nfo] IS NULL) OR ([RCContactInfo] = @Original_RCContactInfo)) AND ((@IsNull_PwdT" +
                "oBeEmailed = 1 AND [PwdToBeEmailed] IS NULL) OR ([PwdToBeEmailed] = @Original_Pw" +
                "dToBeEmailed)) AND ((@IsNull_AcctIsStandAlone = 1 AND [AcctIsStandAlone] IS NULL" +
                ") OR ([AcctIsStandAlone] = @Original_AcctIsStandAlone)) AND ((@IsNull_AcctGenera" +
                "tor = 1 AND [AcctGenerator] IS NULL) OR ([AcctGenerator] = @Original_AcctGenerat" +
                "or)) AND ((@IsNull_AcctIsAlive = 1 AND [AcctIsAlive] IS NULL) OR ([AcctIsAlive] " +
                "= @Original_AcctIsAlive)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID_Original", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID_Original", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_emailAddress", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "emailAddress", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_emailAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailAddress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Creator", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Creator", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PasswordInPlainText", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PasswordInPlainText", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordInPlainText", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PasswordInPlainText", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EmailSent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailSent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmailSent", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailSent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Activated", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Activated", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activated", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Activated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Enabled", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Enabled", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LeadsAccessDuration", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeadsAccessDuration", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RequiresCouponCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RequiresCouponCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RequiresCouponCode", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RequiresCouponCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RCContactInfo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RCContactInfo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RCContactInfo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RCContactInfo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PwdToBeEmailed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PwdToBeEmailed", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PwdToBeEmailed", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PwdToBeEmailed", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcctIsStandAlone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsStandAlone", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctIsStandAlone", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsStandAlone", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcctGenerator", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctGenerator", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctGenerator", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctGenerator", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcctIsAlive", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsAlive", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctIsAlive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsAlive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblAccounts] ([UserID], [UserID_Original], [Password], [FirstName], [LastName], [emailAddress], [Creator], [AcctType], [PasswordInPlainText], [EmailSent], [Activated], [Enabled], [LeadsAccessDuration], [RequiresCouponCode], [RCLogo], [RCContactInfo], [PwdToBeEmailed], [AcctIsStandAlone], [AcctGenerator], [AcctIsAlive]) VALUES (@UserID, @UserID_Original, @Password, @FirstName, @LastName, @emailAddress, @Creator, @AcctType, @PasswordInPlainText, @EmailSent, @Activated, @Enabled, @LeadsAccessDuration, @RequiresCouponCode, @RCLogo, @RCContactInfo, @PwdToBeEmailed, @AcctIsStandAlone, @AcctGenerator, @AcctIsAlive);
SELECT AcctID, UserID, UserID_Original, Password, FirstName, LastName, emailAddress, Creator, AcctType, PasswordInPlainText, EmailSent, Activated, Enabled, LeadsAccessDuration, RequiresCouponCode, RCLogo, RCContactInfo, PwdToBeEmailed, AcctIsStandAlone, AcctGenerator, AcctIsAlive FROM dbo.tblAccounts WHERE (AcctID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID_Original", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID_Original", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@emailAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Creator", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Creator", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordInPlainText", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PasswordInPlainText", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmailSent", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailSent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activated", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Activated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Enabled", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Enabled", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LeadsAccessDuration", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeadsAccessDuration", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RequiresCouponCode", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RequiresCouponCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RCLogo", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "RCLogo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RCContactInfo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RCContactInfo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PwdToBeEmailed", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PwdToBeEmailed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctIsStandAlone", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsStandAlone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctGenerator", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctGenerator", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctIsAlive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsAlive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblAccounts] SET [UserID] = @UserID, [UserID_Original] = @UserID_Or" +
                "iginal, [Password] = @Password, [FirstName] = @FirstName, [LastName] = @LastName" +
                ", [emailAddress] = @emailAddress, [Creator] = @Creator, [AcctType] = @AcctType, " +
                "[PasswordInPlainText] = @PasswordInPlainText, [EmailSent] = @EmailSent, [Activat" +
                "ed] = @Activated, [Enabled] = @Enabled, [LeadsAccessDuration] = @LeadsAccessDura" +
                "tion, [RequiresCouponCode] = @RequiresCouponCode, [RCLogo] = @RCLogo, [RCContact" +
                "Info] = @RCContactInfo, [PwdToBeEmailed] = @PwdToBeEmailed, [AcctIsStandAlone] =" +
                " @AcctIsStandAlone, [AcctGenerator] = @AcctGenerator, [AcctIsAlive] = @AcctIsAli" +
                "ve WHERE (([AcctID] = @Original_AcctID) AND ([UserID] = @Original_UserID) AND ([" +
                "UserID_Original] = @Original_UserID_Original) AND ([Password] = @Original_Passwo" +
                "rd) AND ([FirstName] = @Original_FirstName) AND ([LastName] = @Original_LastName" +
                ") AND ((@IsNull_emailAddress = 1 AND [emailAddress] IS NULL) OR ([emailAddress] " +
                "= @Original_emailAddress)) AND ([Creator] = @Original_Creator) AND ([AcctType] =" +
                " @Original_AcctType) AND ((@IsNull_PasswordInPlainText = 1 AND [PasswordInPlainT" +
                "ext] IS NULL) OR ([PasswordInPlainText] = @Original_PasswordInPlainText)) AND ((" +
                "@IsNull_EmailSent = 1 AND [EmailSent] IS NULL) OR ([EmailSent] = @Original_Email" +
                "Sent)) AND ((@IsNull_Activated = 1 AND [Activated] IS NULL) OR ([Activated] = @O" +
                "riginal_Activated)) AND ([Enabled] = @Original_Enabled) AND ([LeadsAccessDuratio" +
                "n] = @Original_LeadsAccessDuration) AND ((@IsNull_RequiresCouponCode = 1 AND [Re" +
                "quiresCouponCode] IS NULL) OR ([RequiresCouponCode] = @Original_RequiresCouponCo" +
                "de)) AND ((@IsNull_RCContactInfo = 1 AND [RCContactInfo] IS NULL) OR ([RCContact" +
                "Info] = @Original_RCContactInfo)) AND ((@IsNull_PwdToBeEmailed = 1 AND [PwdToBeE" +
                "mailed] IS NULL) OR ([PwdToBeEmailed] = @Original_PwdToBeEmailed)) AND ((@IsNull" +
                "_AcctIsStandAlone = 1 AND [AcctIsStandAlone] IS NULL) OR ([AcctIsStandAlone] = @" +
                "Original_AcctIsStandAlone)) AND ((@IsNull_AcctGenerator = 1 AND [AcctGenerator] " +
                "IS NULL) OR ([AcctGenerator] = @Original_AcctGenerator)) AND ((@IsNull_AcctIsAli" +
                "ve = 1 AND [AcctIsAlive] IS NULL) OR ([AcctIsAlive] = @Original_AcctIsAlive)));\r" +
                "\nSELECT AcctID, UserID, UserID_Original, Password, FirstName, LastName, emailAdd" +
                "ress, Creator, AcctType, PasswordInPlainText, EmailSent, Activated, Enabled, Lea" +
                "dsAccessDuration, RequiresCouponCode, RCLogo, RCContactInfo, PwdToBeEmailed, Acc" +
                "tIsStandAlone, AcctGenerator, AcctIsAlive FROM dbo.tblAccounts WHERE (AcctID = @" +
                "AcctID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID_Original", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID_Original", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@emailAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Creator", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Creator", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordInPlainText", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PasswordInPlainText", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmailSent", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailSent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activated", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Activated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Enabled", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Enabled", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LeadsAccessDuration", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeadsAccessDuration", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RequiresCouponCode", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RequiresCouponCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RCLogo", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "RCLogo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RCContactInfo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RCContactInfo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PwdToBeEmailed", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PwdToBeEmailed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctIsStandAlone", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsStandAlone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctGenerator", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctGenerator", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctIsAlive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsAlive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID_Original", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID_Original", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FirstName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_emailAddress", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "emailAddress", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_emailAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "emailAddress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Creator", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Creator", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PasswordInPlainText", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PasswordInPlainText", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordInPlainText", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PasswordInPlainText", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EmailSent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailSent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmailSent", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailSent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Activated", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Activated", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activated", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Activated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Enabled", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Enabled", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LeadsAccessDuration", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeadsAccessDuration", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RequiresCouponCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RequiresCouponCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RequiresCouponCode", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RequiresCouponCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RCContactInfo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RCContactInfo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RCContactInfo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RCContactInfo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PwdToBeEmailed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PwdToBeEmailed", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PwdToBeEmailed", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PwdToBeEmailed", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcctIsStandAlone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsStandAlone", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctIsStandAlone", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsStandAlone", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcctGenerator", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctGenerator", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctGenerator", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctGenerator", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcctIsAlive", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsAlive", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctIsAlive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctIsAlive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TestReportViewer1.Properties.Settings.Default.lldevelConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT AcctID, UserID, UserID_Original, Password, FirstName, LastName, emailAddress, Creator, AcctType, PasswordInPlainText, EmailSent, Activated, Enabled, LeadsAccessDuration, RequiresCouponCode, RCLogo, RCContactInfo, PwdToBeEmailed, AcctIsStandAlone, AcctGenerator, AcctIsAlive FROM dbo.tblAccounts";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lldevelDataSet.tblAccountsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lldevelDataSet.tblAccountsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lldevelDataSet.tblAccountsDataTable dataTable = new lldevelDataSet.tblAccountsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet.tblAccountsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tblAccounts");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_AcctID, 
                    string Original_UserID, 
                    string Original_UserID_Original, 
                    string Original_Password, 
                    string Original_FirstName, 
                    string Original_LastName, 
                    string Original_emailAddress, 
                    int Original_Creator, 
                    byte Original_AcctType, 
                    string Original_PasswordInPlainText, 
                    System.Nullable<byte> Original_EmailSent, 
                    System.Nullable<bool> Original_Activated, 
                    bool Original_Enabled, 
                    int Original_LeadsAccessDuration, 
                    System.Nullable<bool> Original_RequiresCouponCode, 
                    string Original_RCContactInfo, 
                    string Original_PwdToBeEmailed, 
                    System.Nullable<bool> Original_AcctIsStandAlone, 
                    System.Nullable<byte> Original_AcctGenerator, 
                    System.Nullable<bool> Original_AcctIsAlive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_AcctID));
            if ((Original_UserID == null)) {
                throw new System.ArgumentNullException("Original_UserID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UserID));
            }
            if ((Original_UserID_Original == null)) {
                throw new System.ArgumentNullException("Original_UserID_Original");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_UserID_Original));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Password));
            }
            if ((Original_FirstName == null)) {
                throw new System.ArgumentNullException("Original_FirstName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FirstName));
            }
            if ((Original_LastName == null)) {
                throw new System.ArgumentNullException("Original_LastName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_LastName));
            }
            if ((Original_emailAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_emailAddress));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Creator));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((byte)(Original_AcctType));
            if ((Original_PasswordInPlainText == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_PasswordInPlainText));
            }
            if ((Original_EmailSent.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((byte)(Original_EmailSent.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_Activated.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((bool)(Original_Activated.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_Enabled));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_LeadsAccessDuration));
            if ((Original_RequiresCouponCode.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((bool)(Original_RequiresCouponCode.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_RCContactInfo == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_RCContactInfo));
            }
            if ((Original_PwdToBeEmailed == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_PwdToBeEmailed));
            }
            if ((Original_AcctIsStandAlone.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((bool)(Original_AcctIsStandAlone.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = System.DBNull.Value;
            }
            if ((Original_AcctGenerator.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((byte)(Original_AcctGenerator.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = System.DBNull.Value;
            }
            if ((Original_AcctIsAlive.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((bool)(Original_AcctIsAlive.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string UserID, 
                    string UserID_Original, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string emailAddress, 
                    int Creator, 
                    byte AcctType, 
                    string PasswordInPlainText, 
                    System.Nullable<byte> EmailSent, 
                    System.Nullable<bool> Activated, 
                    bool Enabled, 
                    int LeadsAccessDuration, 
                    System.Nullable<bool> RequiresCouponCode, 
                    byte[] RCLogo, 
                    string RCContactInfo, 
                    string PwdToBeEmailed, 
                    System.Nullable<bool> AcctIsStandAlone, 
                    System.Nullable<byte> AcctGenerator, 
                    System.Nullable<bool> AcctIsAlive) {
            if ((UserID == null)) {
                throw new System.ArgumentNullException("UserID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserID));
            }
            if ((UserID_Original == null)) {
                throw new System.ArgumentNullException("UserID_Original");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UserID_Original));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((FirstName == null)) {
                throw new System.ArgumentNullException("FirstName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                throw new System.ArgumentNullException("LastName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(LastName));
            }
            if ((emailAddress == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(emailAddress));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Creator));
            this.Adapter.InsertCommand.Parameters[7].Value = ((byte)(AcctType));
            if ((PasswordInPlainText == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(PasswordInPlainText));
            }
            if ((EmailSent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((byte)(EmailSent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Activated.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(Activated.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(Enabled));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(LeadsAccessDuration));
            if ((RequiresCouponCode.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(RequiresCouponCode.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((RCLogo == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((byte[])(RCLogo));
            }
            if ((RCContactInfo == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(RCContactInfo));
            }
            if ((PwdToBeEmailed == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(PwdToBeEmailed));
            }
            if ((AcctIsStandAlone.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((bool)(AcctIsStandAlone.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((AcctGenerator.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((byte)(AcctGenerator.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((AcctIsAlive.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((bool)(AcctIsAlive.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UserID, 
                    string UserID_Original, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string emailAddress, 
                    int Creator, 
                    byte AcctType, 
                    string PasswordInPlainText, 
                    System.Nullable<byte> EmailSent, 
                    System.Nullable<bool> Activated, 
                    bool Enabled, 
                    int LeadsAccessDuration, 
                    System.Nullable<bool> RequiresCouponCode, 
                    byte[] RCLogo, 
                    string RCContactInfo, 
                    string PwdToBeEmailed, 
                    System.Nullable<bool> AcctIsStandAlone, 
                    System.Nullable<byte> AcctGenerator, 
                    System.Nullable<bool> AcctIsAlive, 
                    int Original_AcctID, 
                    string Original_UserID, 
                    string Original_UserID_Original, 
                    string Original_Password, 
                    string Original_FirstName, 
                    string Original_LastName, 
                    string Original_emailAddress, 
                    int Original_Creator, 
                    byte Original_AcctType, 
                    string Original_PasswordInPlainText, 
                    System.Nullable<byte> Original_EmailSent, 
                    System.Nullable<bool> Original_Activated, 
                    bool Original_Enabled, 
                    int Original_LeadsAccessDuration, 
                    System.Nullable<bool> Original_RequiresCouponCode, 
                    string Original_RCContactInfo, 
                    string Original_PwdToBeEmailed, 
                    System.Nullable<bool> Original_AcctIsStandAlone, 
                    System.Nullable<byte> Original_AcctGenerator, 
                    System.Nullable<bool> Original_AcctIsAlive, 
                    int AcctID) {
            if ((UserID == null)) {
                throw new System.ArgumentNullException("UserID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserID));
            }
            if ((UserID_Original == null)) {
                throw new System.ArgumentNullException("UserID_Original");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UserID_Original));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((FirstName == null)) {
                throw new System.ArgumentNullException("FirstName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                throw new System.ArgumentNullException("LastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(LastName));
            }
            if ((emailAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(emailAddress));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Creator));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((byte)(AcctType));
            if ((PasswordInPlainText == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(PasswordInPlainText));
            }
            if ((EmailSent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((byte)(EmailSent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Activated.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Activated.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Enabled));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(LeadsAccessDuration));
            if ((RequiresCouponCode.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(RequiresCouponCode.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((RCLogo == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((byte[])(RCLogo));
            }
            if ((RCContactInfo == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(RCContactInfo));
            }
            if ((PwdToBeEmailed == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(PwdToBeEmailed));
            }
            if ((AcctIsStandAlone.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(AcctIsStandAlone.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((AcctGenerator.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((byte)(AcctGenerator.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((AcctIsAlive.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(AcctIsAlive.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_AcctID));
            if ((Original_UserID == null)) {
                throw new System.ArgumentNullException("Original_UserID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_UserID));
            }
            if ((Original_UserID_Original == null)) {
                throw new System.ArgumentNullException("Original_UserID_Original");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_UserID_Original));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Password));
            }
            if ((Original_FirstName == null)) {
                throw new System.ArgumentNullException("Original_FirstName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_FirstName));
            }
            if ((Original_LastName == null)) {
                throw new System.ArgumentNullException("Original_LastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_LastName));
            }
            if ((Original_emailAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_emailAddress));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_Creator));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((byte)(Original_AcctType));
            if ((Original_PasswordInPlainText == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_PasswordInPlainText));
            }
            if ((Original_EmailSent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((byte)(Original_EmailSent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
            }
            if ((Original_Activated.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((bool)(Original_Activated.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[36].Value = ((bool)(Original_Enabled));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_LeadsAccessDuration));
            if ((Original_RequiresCouponCode.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_RequiresCouponCode.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = System.DBNull.Value;
            }
            if ((Original_RCContactInfo == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_RCContactInfo));
            }
            if ((Original_PwdToBeEmailed == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_PwdToBeEmailed));
            }
            if ((Original_AcctIsStandAlone.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((bool)(Original_AcctIsStandAlone.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = System.DBNull.Value;
            }
            if ((Original_AcctGenerator.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((byte)(Original_AcctGenerator.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = System.DBNull.Value;
            }
            if ((Original_AcctIsAlive.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((bool)(Original_AcctIsAlive.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(AcctID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblEventsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblEventsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblEvents";
            tableMapping.ColumnMappings.Add("EventID", "EventID");
            tableMapping.ColumnMappings.Add("EventName", "EventName");
            tableMapping.ColumnMappings.Add("EventStartDate", "EventStartDate");
            tableMapping.ColumnMappings.Add("EventEndDate", "EventEndDate");
            tableMapping.ColumnMappings.Add("EventCity", "EventCity");
            tableMapping.ColumnMappings.Add("EventState", "EventState");
            tableMapping.ColumnMappings.Add("EventCountry", "EventCountry");
            tableMapping.ColumnMappings.Add("EventShowMgmtID", "EventShowMgmtID");
            tableMapping.ColumnMappings.Add("EventRCID", "EventRCID");
            tableMapping.ColumnMappings.Add("EventLogo", "EventLogo");
            tableMapping.ColumnMappings.Add("EvImOpID", "EvImOpID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[tblEvents] WHERE (([EventID] = @Original_EventID) AND ([EventName] = @Original_EventName) AND ([EventStartDate] = @Original_EventStartDate) AND ([EventEndDate] = @Original_EventEndDate) AND ((@IsNull_EventCity = 1 AND [EventCity] IS NULL) OR ([EventCity] = @Original_EventCity)) AND ((@IsNull_EventState = 1 AND [EventState] IS NULL) OR ([EventState] = @Original_EventState)) AND ((@IsNull_EventCountry = 1 AND [EventCountry] IS NULL) OR ([EventCountry] = @Original_EventCountry)) AND ((@IsNull_EventShowMgmtID = 1 AND [EventShowMgmtID] IS NULL) OR ([EventShowMgmtID] = @Original_EventShowMgmtID)) AND ([EventRCID] = @Original_EventRCID) AND ((@IsNull_EvImOpID = 1 AND [EvImOpID] IS NULL) OR ([EvImOpID] = @Original_EvImOpID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventStartDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventEndDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventCity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventCity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventState", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventState", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventState", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventState", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventCountry", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCountry", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventCountry", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCountry", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventShowMgmtID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventShowMgmtID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventShowMgmtID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventShowMgmtID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventRCID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventRCID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EvImOpID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EvImOpID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EvImOpID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EvImOpID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblEvents] ([EventName], [EventStartDate], [EventEndDate], [EventCity], [EventState], [EventCountry], [EventShowMgmtID], [EventRCID], [EventLogo], [EvImOpID]) VALUES (@EventName, @EventStartDate, @EventEndDate, @EventCity, @EventState, @EventCountry, @EventShowMgmtID, @EventRCID, @EventLogo, @EvImOpID);
SELECT EventID, EventName, EventStartDate, EventEndDate, EventCity, EventState, EventCountry, EventShowMgmtID, EventRCID, EventLogo, EvImOpID FROM dbo.tblEvents WHERE (EventID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventStartDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventEndDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventCity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventState", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventState", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventCountry", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCountry", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventShowMgmtID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventShowMgmtID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventRCID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventRCID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventLogo", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "EventLogo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EvImOpID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EvImOpID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblEvents] SET [EventName] = @EventName, [EventStartDate] = @EventStartDate, [EventEndDate] = @EventEndDate, [EventCity] = @EventCity, [EventState] = @EventState, [EventCountry] = @EventCountry, [EventShowMgmtID] = @EventShowMgmtID, [EventRCID] = @EventRCID, [EventLogo] = @EventLogo, [EvImOpID] = @EvImOpID WHERE (([EventID] = @Original_EventID) AND ([EventName] = @Original_EventName) AND ([EventStartDate] = @Original_EventStartDate) AND ([EventEndDate] = @Original_EventEndDate) AND ((@IsNull_EventCity = 1 AND [EventCity] IS NULL) OR ([EventCity] = @Original_EventCity)) AND ((@IsNull_EventState = 1 AND [EventState] IS NULL) OR ([EventState] = @Original_EventState)) AND ((@IsNull_EventCountry = 1 AND [EventCountry] IS NULL) OR ([EventCountry] = @Original_EventCountry)) AND ((@IsNull_EventShowMgmtID = 1 AND [EventShowMgmtID] IS NULL) OR ([EventShowMgmtID] = @Original_EventShowMgmtID)) AND ([EventRCID] = @Original_EventRCID) AND ((@IsNull_EvImOpID = 1 AND [EvImOpID] IS NULL) OR ([EvImOpID] = @Original_EvImOpID)));
SELECT EventID, EventName, EventStartDate, EventEndDate, EventCity, EventState, EventCountry, EventShowMgmtID, EventRCID, EventLogo, EvImOpID FROM dbo.tblEvents WHERE (EventID = @EventID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventStartDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventEndDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventCity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventState", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventState", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventCountry", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCountry", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventShowMgmtID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventShowMgmtID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventRCID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventRCID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventLogo", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "EventLogo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EvImOpID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EvImOpID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventStartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventStartDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventEndDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EventEndDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventCity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventCity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventState", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventState", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventState", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventState", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventCountry", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCountry", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventCountry", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EventCountry", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EventShowMgmtID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventShowMgmtID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventShowMgmtID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventShowMgmtID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventRCID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventRCID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EvImOpID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EvImOpID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EvImOpID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EvImOpID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TestReportViewer1.Properties.Settings.Default.lldevelConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EventID, EventName, EventStartDate, EventEndDate, EventCity, EventState, E" +
                "ventCountry, EventShowMgmtID, EventRCID, EventLogo, EvImOpID FROM dbo.tblEvents";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lldevelDataSet.tblEventsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lldevelDataSet.tblEventsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lldevelDataSet.tblEventsDataTable dataTable = new lldevelDataSet.tblEventsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet.tblEventsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tblEvents");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EventID, string Original_EventName, System.DateTime Original_EventStartDate, System.DateTime Original_EventEndDate, string Original_EventCity, string Original_EventState, string Original_EventCountry, System.Nullable<int> Original_EventShowMgmtID, int Original_EventRCID, System.Nullable<int> Original_EvImOpID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EventID));
            if ((Original_EventName == null)) {
                throw new System.ArgumentNullException("Original_EventName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_EventName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_EventStartDate));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_EventEndDate));
            if ((Original_EventCity == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_EventCity));
            }
            if ((Original_EventState == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_EventState));
            }
            if ((Original_EventCountry == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_EventCountry));
            }
            if ((Original_EventShowMgmtID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_EventShowMgmtID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_EventRCID));
            if ((Original_EvImOpID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_EvImOpID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string EventName, System.DateTime EventStartDate, System.DateTime EventEndDate, string EventCity, string EventState, string EventCountry, System.Nullable<int> EventShowMgmtID, int EventRCID, byte[] EventLogo, System.Nullable<int> EvImOpID) {
            if ((EventName == null)) {
                throw new System.ArgumentNullException("EventName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EventName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(EventStartDate));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(EventEndDate));
            if ((EventCity == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(EventCity));
            }
            if ((EventState == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(EventState));
            }
            if ((EventCountry == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(EventCountry));
            }
            if ((EventShowMgmtID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(EventShowMgmtID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(EventRCID));
            if ((EventLogo == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((byte[])(EventLogo));
            }
            if ((EvImOpID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(EvImOpID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string EventName, 
                    System.DateTime EventStartDate, 
                    System.DateTime EventEndDate, 
                    string EventCity, 
                    string EventState, 
                    string EventCountry, 
                    System.Nullable<int> EventShowMgmtID, 
                    int EventRCID, 
                    byte[] EventLogo, 
                    System.Nullable<int> EvImOpID, 
                    int Original_EventID, 
                    string Original_EventName, 
                    System.DateTime Original_EventStartDate, 
                    System.DateTime Original_EventEndDate, 
                    string Original_EventCity, 
                    string Original_EventState, 
                    string Original_EventCountry, 
                    System.Nullable<int> Original_EventShowMgmtID, 
                    int Original_EventRCID, 
                    System.Nullable<int> Original_EvImOpID, 
                    int EventID) {
            if ((EventName == null)) {
                throw new System.ArgumentNullException("EventName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EventName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(EventStartDate));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(EventEndDate));
            if ((EventCity == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(EventCity));
            }
            if ((EventState == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(EventState));
            }
            if ((EventCountry == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(EventCountry));
            }
            if ((EventShowMgmtID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(EventShowMgmtID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(EventRCID));
            if ((EventLogo == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(EventLogo));
            }
            if ((EvImOpID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(EvImOpID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_EventID));
            if ((Original_EventName == null)) {
                throw new System.ArgumentNullException("Original_EventName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_EventName));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_EventStartDate));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EventEndDate));
            if ((Original_EventCity == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_EventCity));
            }
            if ((Original_EventState == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_EventState));
            }
            if ((Original_EventCountry == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_EventCountry));
            }
            if ((Original_EventShowMgmtID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_EventShowMgmtID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_EventRCID));
            if ((Original_EvImOpID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_EvImOpID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(EventID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSwipesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSwipesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSwipes";
            tableMapping.ColumnMappings.Add("SwipeID", "SwipeID");
            tableMapping.ColumnMappings.Add("PersonEventID", "PersonEventID");
            tableMapping.ColumnMappings.Add("AcctID", "AcctID");
            tableMapping.ColumnMappings.Add("EventID", "EventID");
            tableMapping.ColumnMappings.Add("SwipeDate", "SwipeDate");
            tableMapping.ColumnMappings.Add("TerminalID", "TerminalID");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("DataSource", "DataSource");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[tblSwipes] WHERE (([SwipeID] = @Original_SwipeID) AND ([PersonEventID] = @Original_PersonEventID) AND ([AcctID] = @Original_AcctID) AND ([EventID] = @Original_EventID) AND ([SwipeDate] = @Original_SwipeDate) AND ([TerminalID] = @Original_TerminalID) AND ([DataSource] = @Original_DataSource))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SwipeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SwipeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PersonEventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PersonEventID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SwipeDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SwipeDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TerminalID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DataSource", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DataSource", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tblSwipes] ([PersonEventID], [AcctID], [EventID], [SwipeDate], [TerminalID], [Notes], [DataSource]) VALUES (@PersonEventID, @AcctID, @EventID, @SwipeDate, @TerminalID, @Notes, @DataSource);
SELECT SwipeID, PersonEventID, AcctID, EventID, SwipeDate, TerminalID, Notes, DataSource FROM dbo.tblSwipes WHERE (SwipeID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PersonEventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PersonEventID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SwipeDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SwipeDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TerminalID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Notes", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Notes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DataSource", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DataSource", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tblSwipes] SET [PersonEventID] = @PersonEventID, [AcctID] = @AcctID, [EventID] = @EventID, [SwipeDate] = @SwipeDate, [TerminalID] = @TerminalID, [Notes] = @Notes, [DataSource] = @DataSource WHERE (([SwipeID] = @Original_SwipeID) AND ([PersonEventID] = @Original_PersonEventID) AND ([AcctID] = @Original_AcctID) AND ([EventID] = @Original_EventID) AND ([SwipeDate] = @Original_SwipeDate) AND ([TerminalID] = @Original_TerminalID) AND ([DataSource] = @Original_DataSource));
SELECT SwipeID, PersonEventID, AcctID, EventID, SwipeDate, TerminalID, Notes, DataSource FROM dbo.tblSwipes WHERE (SwipeID = @SwipeID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PersonEventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PersonEventID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcctID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SwipeDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SwipeDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TerminalID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Notes", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Notes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DataSource", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DataSource", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SwipeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SwipeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PersonEventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PersonEventID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcctID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcctID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EventID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SwipeDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SwipeDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TerminalID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DataSource", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DataSource", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SwipeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SwipeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TestReportViewer1.Properties.Settings.Default.lldevelConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SwipeID, PersonEventID, AcctID, EventID, SwipeDate, TerminalID, Notes, Dat" +
                "aSource FROM dbo.tblSwipes";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lldevelDataSet.tblSwipesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lldevelDataSet.tblSwipesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lldevelDataSet.tblSwipesDataTable dataTable = new lldevelDataSet.tblSwipesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet.tblSwipesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tblSwipes");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SwipeID, int Original_PersonEventID, int Original_AcctID, int Original_EventID, System.DateTime Original_SwipeDate, int Original_TerminalID, byte Original_DataSource) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SwipeID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_PersonEventID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_AcctID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_EventID));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_SwipeDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_TerminalID));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((byte)(Original_DataSource));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int PersonEventID, int AcctID, int EventID, System.DateTime SwipeDate, int TerminalID, string Notes, byte DataSource) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PersonEventID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(AcctID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(EventID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(SwipeDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(TerminalID));
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Notes));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((byte)(DataSource));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int PersonEventID, int AcctID, int EventID, System.DateTime SwipeDate, int TerminalID, string Notes, byte DataSource, int Original_SwipeID, int Original_PersonEventID, int Original_AcctID, int Original_EventID, System.DateTime Original_SwipeDate, int Original_TerminalID, byte Original_DataSource, int SwipeID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(PersonEventID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(AcctID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(EventID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(SwipeDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(TerminalID));
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Notes));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((byte)(DataSource));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_SwipeID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_PersonEventID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_AcctID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_EventID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_SwipeDate));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_TerminalID));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((byte)(Original_DataSource));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(SwipeID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblTerminalTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblTerminalTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblTerminal";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TerminalSerial", "TerminalSerial");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblTerminal] WHERE (([ID] = @Original_ID) AND ([TerminalSerial" +
                "] = @Original_TerminalSerial))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TerminalSerial", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalSerial", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblTerminal] ([TerminalSerial]) VALUES (@TerminalSerial);\r\nSEL" +
                "ECT ID, TerminalSerial FROM dbo.tblTerminal WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TerminalSerial", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalSerial", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblTerminal] SET [TerminalSerial] = @TerminalSerial WHERE (([ID] = " +
                "@Original_ID) AND ([TerminalSerial] = @Original_TerminalSerial));\r\nSELECT ID, Te" +
                "rminalSerial FROM dbo.tblTerminal WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TerminalSerial", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalSerial", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TerminalSerial", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TerminalSerial", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TestReportViewer1.Properties.Settings.Default.lldevelConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, TerminalSerial FROM dbo.tblTerminal";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(lldevelDataSet.tblTerminalDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual lldevelDataSet.tblTerminalDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            lldevelDataSet.tblTerminalDataTable dataTable = new lldevelDataSet.tblTerminalDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet.tblTerminalDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(lldevelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tblTerminal");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_TerminalSerial) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_TerminalSerial == null)) {
                throw new System.ArgumentNullException("Original_TerminalSerial");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TerminalSerial));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TerminalSerial) {
            if ((TerminalSerial == null)) {
                throw new System.ArgumentNullException("TerminalSerial");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TerminalSerial));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TerminalSerial, int Original_ID, string Original_TerminalSerial, int ID) {
            if ((TerminalSerial == null)) {
                throw new System.ArgumentNullException("TerminalSerial");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TerminalSerial));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_ID));
            if ((Original_TerminalSerial == null)) {
                throw new System.ArgumentNullException("Original_TerminalSerial");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TerminalSerial));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591