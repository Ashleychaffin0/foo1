//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.312.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="LLWS1Soap", Namespace="http://www.LeadsLightning.com/")]
public partial class LLWS1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback ImportOperationCompleted;
    
    private System.Threading.SendOrPostCallback Import2OperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSetupInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSetupInfo2OperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSetupFileOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSetupFile2OperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMapFileIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetSystemInfoOperationCompleted;
    
    /// <remarks/>
    public LLWS1() {
        this.Url = "http://localhost/WebServices/LLWS1.asmx";
    }
    
    /// <remarks/>
    public event ImportCompletedEventHandler ImportCompleted;
    
    /// <remarks/>
    public event Import2CompletedEventHandler Import2Completed;
    
    /// <remarks/>
    public event GetSetupInfoCompletedEventHandler GetSetupInfoCompleted;
    
    /// <remarks/>
    public event GetSetupInfo2CompletedEventHandler GetSetupInfo2Completed;
    
    /// <remarks/>
    public event GetSetupFileCompletedEventHandler GetSetupFileCompleted;
    
    /// <remarks/>
    public event GetSetupFile2CompletedEventHandler GetSetupFile2Completed;
    
    /// <remarks/>
    public event GetMapFileIDCompletedEventHandler GetMapFileIDCompleted;
    
    /// <remarks/>
    public event GetSystemInfoCompletedEventHandler GetSystemInfoCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/Import", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public ImportStatus Import(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                out ImportStatus[] RecordStatuses) {
        object[] results = this.Invoke("Import", new object[] {
                    UserID,
                    Password,
                    ImportingUserID,
                    ImportingPassword,
                    EventID,
                    SwipeData,
                    MapCfgFile,
                    Map_Type,
                    TerminalID,
                    IgnoreFirstRecord,
                    DataIsExpanded,
                    Source,
                    IsReplacementSwipe,
                    Flags,
                    MediaDirectory});
        RecordStatuses = ((ImportStatus[])(results[1]));
        return ((ImportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginImport(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("Import", new object[] {
                    UserID,
                    Password,
                    ImportingUserID,
                    ImportingPassword,
                    EventID,
                    SwipeData,
                    MapCfgFile,
                    Map_Type,
                    TerminalID,
                    IgnoreFirstRecord,
                    DataIsExpanded,
                    Source,
                    IsReplacementSwipe,
                    Flags,
                    MediaDirectory}, callback, asyncState);
    }
    
    /// <remarks/>
    public ImportStatus EndImport(System.IAsyncResult asyncResult, out ImportStatus[] RecordStatuses) {
        object[] results = this.EndInvoke(asyncResult);
        RecordStatuses = ((ImportStatus[])(results[1]));
        return ((ImportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void ImportAsync(string UserID, string Password, string ImportingUserID, string ImportingPassword, int EventID, string SwipeData, string MapCfgFile, MapType Map_Type, string TerminalID, bool IgnoreFirstRecord, bool DataIsExpanded, DataSource Source, bool IsReplacementSwipe, int Flags, string MediaDirectory) {
        this.ImportAsync(UserID, Password, ImportingUserID, ImportingPassword, EventID, SwipeData, MapCfgFile, Map_Type, TerminalID, IgnoreFirstRecord, DataIsExpanded, Source, IsReplacementSwipe, Flags, MediaDirectory, null);
    }
    
    /// <remarks/>
    public void ImportAsync(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                object userState) {
        if ((this.ImportOperationCompleted == null)) {
            this.ImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportOperationCompleted);
        }
        this.InvokeAsync("Import", new object[] {
                    UserID,
                    Password,
                    ImportingUserID,
                    ImportingPassword,
                    EventID,
                    SwipeData,
                    MapCfgFile,
                    Map_Type,
                    TerminalID,
                    IgnoreFirstRecord,
                    DataIsExpanded,
                    Source,
                    IsReplacementSwipe,
                    Flags,
                    MediaDirectory}, this.ImportOperationCompleted, userState);
    }
    
    private void OnImportOperationCompleted(object arg) {
        if ((this.ImportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ImportCompleted(this, new ImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/Import2", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public ImportStatus Import2(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                string SetupCode, 
                System.DateTime SetupTimestamp, 
                out ImportStatus[] RecordStatuses) {
        object[] results = this.Invoke("Import2", new object[] {
                    UserID,
                    Password,
                    ImportingUserID,
                    ImportingPassword,
                    EventID,
                    SwipeData,
                    MapCfgFile,
                    Map_Type,
                    TerminalID,
                    IgnoreFirstRecord,
                    DataIsExpanded,
                    Source,
                    IsReplacementSwipe,
                    Flags,
                    MediaDirectory,
                    SetupCode,
                    SetupTimestamp});
        RecordStatuses = ((ImportStatus[])(results[1]));
        return ((ImportStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginImport2(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                string SetupCode, 
                System.DateTime SetupTimestamp, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("Import2", new object[] {
                    UserID,
                    Password,
                    ImportingUserID,
                    ImportingPassword,
                    EventID,
                    SwipeData,
                    MapCfgFile,
                    Map_Type,
                    TerminalID,
                    IgnoreFirstRecord,
                    DataIsExpanded,
                    Source,
                    IsReplacementSwipe,
                    Flags,
                    MediaDirectory,
                    SetupCode,
                    SetupTimestamp}, callback, asyncState);
    }
    
    /// <remarks/>
    public ImportStatus EndImport2(System.IAsyncResult asyncResult, out ImportStatus[] RecordStatuses) {
        object[] results = this.EndInvoke(asyncResult);
        RecordStatuses = ((ImportStatus[])(results[1]));
        return ((ImportStatus)(results[0]));
    }
    
    /// <remarks/>
    public void Import2Async(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                string SetupCode, 
                System.DateTime SetupTimestamp) {
        this.Import2Async(UserID, Password, ImportingUserID, ImportingPassword, EventID, SwipeData, MapCfgFile, Map_Type, TerminalID, IgnoreFirstRecord, DataIsExpanded, Source, IsReplacementSwipe, Flags, MediaDirectory, SetupCode, SetupTimestamp, null);
    }
    
    /// <remarks/>
    public void Import2Async(
                string UserID, 
                string Password, 
                string ImportingUserID, 
                string ImportingPassword, 
                int EventID, 
                string SwipeData, 
                string MapCfgFile, 
                MapType Map_Type, 
                string TerminalID, 
                bool IgnoreFirstRecord, 
                bool DataIsExpanded, 
                DataSource Source, 
                bool IsReplacementSwipe, 
                int Flags, 
                string MediaDirectory, 
                string SetupCode, 
                System.DateTime SetupTimestamp, 
                object userState) {
        if ((this.Import2OperationCompleted == null)) {
            this.Import2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport2OperationCompleted);
        }
        this.InvokeAsync("Import2", new object[] {
                    UserID,
                    Password,
                    ImportingUserID,
                    ImportingPassword,
                    EventID,
                    SwipeData,
                    MapCfgFile,
                    Map_Type,
                    TerminalID,
                    IgnoreFirstRecord,
                    DataIsExpanded,
                    Source,
                    IsReplacementSwipe,
                    Flags,
                    MediaDirectory,
                    SetupCode,
                    SetupTimestamp}, this.Import2OperationCompleted, userState);
    }
    
    private void OnImport2OperationCompleted(object arg) {
        if ((this.Import2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.Import2Completed(this, new Import2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/GetSetupInfo", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetSetupInfo(string SetupCode, out string UserID, out string Password, out int SetupFileLength, out int MapCfgID, out int EventID, out int ErrorCode) {
        object[] results = this.Invoke("GetSetupInfo", new object[] {
                    SetupCode});
        UserID = ((string)(results[1]));
        Password = ((string)(results[2]));
        SetupFileLength = ((int)(results[3]));
        MapCfgID = ((int)(results[4]));
        EventID = ((int)(results[5]));
        ErrorCode = ((int)(results[6]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSetupInfo(string SetupCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSetupInfo", new object[] {
                    SetupCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetSetupInfo(System.IAsyncResult asyncResult, out string UserID, out string Password, out int SetupFileLength, out int MapCfgID, out int EventID, out int ErrorCode) {
        object[] results = this.EndInvoke(asyncResult);
        UserID = ((string)(results[1]));
        Password = ((string)(results[2]));
        SetupFileLength = ((int)(results[3]));
        MapCfgID = ((int)(results[4]));
        EventID = ((int)(results[5]));
        ErrorCode = ((int)(results[6]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetSetupInfoAsync(string SetupCode) {
        this.GetSetupInfoAsync(SetupCode, null);
    }
    
    /// <remarks/>
    public void GetSetupInfoAsync(string SetupCode, object userState) {
        if ((this.GetSetupInfoOperationCompleted == null)) {
            this.GetSetupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSetupInfoOperationCompleted);
        }
        this.InvokeAsync("GetSetupInfo", new object[] {
                    SetupCode}, this.GetSetupInfoOperationCompleted, userState);
    }
    
    private void OnGetSetupInfoOperationCompleted(object arg) {
        if ((this.GetSetupInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSetupInfoCompleted(this, new GetSetupInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/GetSetupInfo2", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetSetupInfo2(string SetupCode, out string UserID, out string Password, out int SetupFileLength, out int MapCfgID, out int EventID, out int ErrorCode, out System.DateTime SetupTimestamp) {
        object[] results = this.Invoke("GetSetupInfo2", new object[] {
                    SetupCode});
        UserID = ((string)(results[1]));
        Password = ((string)(results[2]));
        SetupFileLength = ((int)(results[3]));
        MapCfgID = ((int)(results[4]));
        EventID = ((int)(results[5]));
        ErrorCode = ((int)(results[6]));
        SetupTimestamp = ((System.DateTime)(results[7]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSetupInfo2(string SetupCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSetupInfo2", new object[] {
                    SetupCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetSetupInfo2(System.IAsyncResult asyncResult, out string UserID, out string Password, out int SetupFileLength, out int MapCfgID, out int EventID, out int ErrorCode, out System.DateTime SetupTimestamp) {
        object[] results = this.EndInvoke(asyncResult);
        UserID = ((string)(results[1]));
        Password = ((string)(results[2]));
        SetupFileLength = ((int)(results[3]));
        MapCfgID = ((int)(results[4]));
        EventID = ((int)(results[5]));
        ErrorCode = ((int)(results[6]));
        SetupTimestamp = ((System.DateTime)(results[7]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetSetupInfo2Async(string SetupCode) {
        this.GetSetupInfo2Async(SetupCode, null);
    }
    
    /// <remarks/>
    public void GetSetupInfo2Async(string SetupCode, object userState) {
        if ((this.GetSetupInfo2OperationCompleted == null)) {
            this.GetSetupInfo2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSetupInfo2OperationCompleted);
        }
        this.InvokeAsync("GetSetupInfo2", new object[] {
                    SetupCode}, this.GetSetupInfo2OperationCompleted, userState);
    }
    
    private void OnGetSetupInfo2OperationCompleted(object arg) {
        if ((this.GetSetupInfo2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSetupInfo2Completed(this, new GetSetupInfo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/GetSetupFile", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetSetupFile(string SetupCode, int PacketSize, int PacketNum, out string Packet, out int OutputPacketLength, out int ErrorCode) {
        object[] results = this.Invoke("GetSetupFile", new object[] {
                    SetupCode,
                    PacketSize,
                    PacketNum});
        Packet = ((string)(results[1]));
        OutputPacketLength = ((int)(results[2]));
        ErrorCode = ((int)(results[3]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSetupFile(string SetupCode, int PacketSize, int PacketNum, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSetupFile", new object[] {
                    SetupCode,
                    PacketSize,
                    PacketNum}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetSetupFile(System.IAsyncResult asyncResult, out string Packet, out int OutputPacketLength, out int ErrorCode) {
        object[] results = this.EndInvoke(asyncResult);
        Packet = ((string)(results[1]));
        OutputPacketLength = ((int)(results[2]));
        ErrorCode = ((int)(results[3]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetSetupFileAsync(string SetupCode, int PacketSize, int PacketNum) {
        this.GetSetupFileAsync(SetupCode, PacketSize, PacketNum, null);
    }
    
    /// <remarks/>
    public void GetSetupFileAsync(string SetupCode, int PacketSize, int PacketNum, object userState) {
        if ((this.GetSetupFileOperationCompleted == null)) {
            this.GetSetupFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSetupFileOperationCompleted);
        }
        this.InvokeAsync("GetSetupFile", new object[] {
                    SetupCode,
                    PacketSize,
                    PacketNum}, this.GetSetupFileOperationCompleted, userState);
    }
    
    private void OnGetSetupFileOperationCompleted(object arg) {
        if ((this.GetSetupFileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSetupFileCompleted(this, new GetSetupFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/GetSetupFile2", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetSetupFile2(string SetupCode, int PacketSize, int PacketNum, out string Packet, out int OutputPacketLength, out int ErrorCode, out System.DateTime SetupTimestamp) {
        object[] results = this.Invoke("GetSetupFile2", new object[] {
                    SetupCode,
                    PacketSize,
                    PacketNum});
        Packet = ((string)(results[1]));
        OutputPacketLength = ((int)(results[2]));
        ErrorCode = ((int)(results[3]));
        SetupTimestamp = ((System.DateTime)(results[4]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSetupFile2(string SetupCode, int PacketSize, int PacketNum, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSetupFile2", new object[] {
                    SetupCode,
                    PacketSize,
                    PacketNum}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetSetupFile2(System.IAsyncResult asyncResult, out string Packet, out int OutputPacketLength, out int ErrorCode, out System.DateTime SetupTimestamp) {
        object[] results = this.EndInvoke(asyncResult);
        Packet = ((string)(results[1]));
        OutputPacketLength = ((int)(results[2]));
        ErrorCode = ((int)(results[3]));
        SetupTimestamp = ((System.DateTime)(results[4]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetSetupFile2Async(string SetupCode, int PacketSize, int PacketNum) {
        this.GetSetupFile2Async(SetupCode, PacketSize, PacketNum, null);
    }
    
    /// <remarks/>
    public void GetSetupFile2Async(string SetupCode, int PacketSize, int PacketNum, object userState) {
        if ((this.GetSetupFile2OperationCompleted == null)) {
            this.GetSetupFile2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSetupFile2OperationCompleted);
        }
        this.InvokeAsync("GetSetupFile2", new object[] {
                    SetupCode,
                    PacketSize,
                    PacketNum}, this.GetSetupFile2OperationCompleted, userState);
    }
    
    private void OnGetSetupFile2OperationCompleted(object arg) {
        if ((this.GetSetupFile2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSetupFile2Completed(this, new GetSetupFile2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/GetMapFileID", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetMapFileID(string SetupCode, string MapCfgFile, out int MapCfgID, out int ErrorCode) {
        object[] results = this.Invoke("GetMapFileID", new object[] {
                    SetupCode,
                    MapCfgFile});
        MapCfgID = ((int)(results[1]));
        ErrorCode = ((int)(results[2]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetMapFileID(string SetupCode, string MapCfgFile, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMapFileID", new object[] {
                    SetupCode,
                    MapCfgFile}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetMapFileID(System.IAsyncResult asyncResult, out int MapCfgID, out int ErrorCode) {
        object[] results = this.EndInvoke(asyncResult);
        MapCfgID = ((int)(results[1]));
        ErrorCode = ((int)(results[2]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetMapFileIDAsync(string SetupCode, string MapCfgFile) {
        this.GetMapFileIDAsync(SetupCode, MapCfgFile, null);
    }
    
    /// <remarks/>
    public void GetMapFileIDAsync(string SetupCode, string MapCfgFile, object userState) {
        if ((this.GetMapFileIDOperationCompleted == null)) {
            this.GetMapFileIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMapFileIDOperationCompleted);
        }
        this.InvokeAsync("GetMapFileID", new object[] {
                    SetupCode,
                    MapCfgFile}, this.GetMapFileIDOperationCompleted, userState);
    }
    
    private void OnGetMapFileIDOperationCompleted(object arg) {
        if ((this.GetMapFileIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMapFileIDCompleted(this, new GetMapFileIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.LeadsLightning.com/GetSystemInfo", RequestNamespace="http://www.LeadsLightning.com/", ResponseNamespace="http://www.LeadsLightning.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int GetSystemInfo(out string MachineName, out int ProcessorCount, out string os, out int TickCount, out string UserName, out string UserDomainName, out System.DateTime CurrentTime, out string CLRVersion, out string[] EnvironmentVars) {
        object[] results = this.Invoke("GetSystemInfo", new object[0]);
        MachineName = ((string)(results[1]));
        ProcessorCount = ((int)(results[2]));
        os = ((string)(results[3]));
        TickCount = ((int)(results[4]));
        UserName = ((string)(results[5]));
        UserDomainName = ((string)(results[6]));
        CurrentTime = ((System.DateTime)(results[7]));
        CLRVersion = ((string)(results[8]));
        EnvironmentVars = ((string[])(results[9]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSystemInfo(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSystemInfo", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public int EndGetSystemInfo(System.IAsyncResult asyncResult, out string MachineName, out int ProcessorCount, out string os, out int TickCount, out string UserName, out string UserDomainName, out System.DateTime CurrentTime, out string CLRVersion, out string[] EnvironmentVars) {
        object[] results = this.EndInvoke(asyncResult);
        MachineName = ((string)(results[1]));
        ProcessorCount = ((int)(results[2]));
        os = ((string)(results[3]));
        TickCount = ((int)(results[4]));
        UserName = ((string)(results[5]));
        UserDomainName = ((string)(results[6]));
        CurrentTime = ((System.DateTime)(results[7]));
        CLRVersion = ((string)(results[8]));
        EnvironmentVars = ((string[])(results[9]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void GetSystemInfoAsync() {
        this.GetSystemInfoAsync(null);
    }
    
    /// <remarks/>
    public void GetSystemInfoAsync(object userState) {
        if ((this.GetSystemInfoOperationCompleted == null)) {
            this.GetSystemInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemInfoOperationCompleted);
        }
        this.InvokeAsync("GetSystemInfo", new object[0], this.GetSystemInfoOperationCompleted, userState);
    }
    
    private void OnGetSystemInfoOperationCompleted(object arg) {
        if ((this.GetSystemInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSystemInfoCompleted(this, new GetSystemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.LeadsLightning.com/")]
public enum MapType {
    
    /// <remarks/>
    MapTypeText,
    
    /// <remarks/>
    MapTypeKey,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.LeadsLightning.com/")]
public enum DataSource {
    
    /// <remarks/>
    LeadsLightning,
    
    /// <remarks/>
    Leads2GoWiFi,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.LeadsLightning.com/")]
public partial class ImportStatus {
    
    private int recNoField;
    
    private int swipeIDField;
    
    private ImportStatusErrCode errCodeField;
    
    private bool duplicateField;
    
    private string errMsgsField;
    
    private string debugInfoField;
    
    private int recordOffsetField;
    
    private int recordLengthField;
    
    /// <remarks/>
    public int RecNo {
        get {
            return this.recNoField;
        }
        set {
            this.recNoField = value;
        }
    }
    
    /// <remarks/>
    public int SwipeID {
        get {
            return this.swipeIDField;
        }
        set {
            this.swipeIDField = value;
        }
    }
    
    /// <remarks/>
    public ImportStatusErrCode ErrCode {
        get {
            return this.errCodeField;
        }
        set {
            this.errCodeField = value;
        }
    }
    
    /// <remarks/>
    public bool Duplicate {
        get {
            return this.duplicateField;
        }
        set {
            this.duplicateField = value;
        }
    }
    
    /// <remarks/>
    public string ErrMsgs {
        get {
            return this.errMsgsField;
        }
        set {
            this.errMsgsField = value;
        }
    }
    
    /// <remarks/>
    public string DebugInfo {
        get {
            return this.debugInfoField;
        }
        set {
            this.debugInfoField = value;
        }
    }
    
    /// <remarks/>
    public int RecordOffset {
        get {
            return this.recordOffsetField;
        }
        set {
            this.recordOffsetField = value;
        }
    }
    
    /// <remarks/>
    public int RecordLength {
        get {
            return this.recordLengthField;
        }
        set {
            this.recordLengthField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.LeadsLightning.com/")]
public enum ImportStatusErrCode {
    
    /// <remarks/>
    OK,
    
    /// <remarks/>
    Warning,
    
    /// <remarks/>
    Problem,
    
    /// <remarks/>
    SwipeIsEmpty,
    
    /// <remarks/>
    RecNoIsInvalid,
    
    /// <remarks/>
    OKButSomeRecordsHadErrors,
    
    /// <remarks/>
    InvalidUserIDPassword,
    
    /// <remarks/>
    NullMapCfg,
    
    /// <remarks/>
    MapCfgNotFound,
    
    /// <remarks/>
    BadMapCfgType,
    
    /// <remarks/>
    UnableToLoadXMLFirmwareDefs,
    
    /// <remarks/>
    EventNotFound,
    
    /// <remarks/>
    ImportingUserIDOrPasswordIsNull,
    
    /// <remarks/>
    CantInsertAETID,
    
    /// <remarks/>
    SetupTimestampMismatch,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void ImportCompletedEventHandler(object sender, ImportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ImportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ImportStatus)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public ImportStatus[] RecordStatuses {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ImportStatus[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void Import2CompletedEventHandler(object sender, Import2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class Import2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal Import2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ImportStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ImportStatus)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public ImportStatus[] RecordStatuses {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ImportStatus[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void GetSetupInfoCompletedEventHandler(object sender, GetSetupInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSetupInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSetupInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string UserID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string Password {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public int SetupFileLength {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public int MapCfgID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[4]));
        }
    }
    
    /// <remarks/>
    public int EventID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[5]));
        }
    }
    
    /// <remarks/>
    public int ErrorCode {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[6]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void GetSetupInfo2CompletedEventHandler(object sender, GetSetupInfo2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSetupInfo2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSetupInfo2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string UserID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string Password {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public int SetupFileLength {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public int MapCfgID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[4]));
        }
    }
    
    /// <remarks/>
    public int EventID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[5]));
        }
    }
    
    /// <remarks/>
    public int ErrorCode {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[6]));
        }
    }
    
    /// <remarks/>
    public System.DateTime SetupTimestamp {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[7]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void GetSetupFileCompletedEventHandler(object sender, GetSetupFileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSetupFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSetupFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string Packet {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int OutputPacketLength {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public int ErrorCode {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void GetSetupFile2CompletedEventHandler(object sender, GetSetupFile2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSetupFile2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSetupFile2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string Packet {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int OutputPacketLength {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public int ErrorCode {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public System.DateTime SetupTimestamp {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[4]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void GetMapFileIDCompletedEventHandler(object sender, GetMapFileIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetMapFileIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMapFileIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public int MapCfgID {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int ErrorCode {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
public delegate void GetSystemInfoCompletedEventHandler(object sender, GetSystemInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.312")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetSystemInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetSystemInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string MachineName {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int ProcessorCount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public string os {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public int TickCount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[4]));
        }
    }
    
    /// <remarks/>
    public string UserName {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[5]));
        }
    }
    
    /// <remarks/>
    public string UserDomainName {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[6]));
        }
    }
    
    /// <remarks/>
    public System.DateTime CurrentTime {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[7]));
        }
    }
    
    /// <remarks/>
    public string CLRVersion {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[8]));
        }
    }
    
    /// <remarks/>
    public string[] EnvironmentVars {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[9]));
        }
    }
}
